<?xml version="1.0" encoding="UTF-8" ?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="UserLoginValidation" short-description="Basic Account Validation" login-required="false">
        <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStore" ret-field="productStore">
            <field field="request" type="javax.servlet.ServletRequest"/>
        </call-class-method>

        <if-not-empty field="productStore.allowPassword">
            <if-compare operator="not-equals" value="Y" field="productStore.allowPassword">
                <set field="parameters.PASSWORD" from-field="productStore.defaultPassword" default-value="ungssblepswd"/>
                <set field="parameters.CONFIRM_PASSWORD" from-field="productStore.defaultPassword" default-value="ungssblepswd"/>
                <set field="parameters.PASSWORD_HINT" value="No hint set, account not yet enabled"/>
            </if-compare>
        </if-not-empty>

        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>

        <if-compare field="productStore.usePrimaryEmailUsername" operator="equals" value="Y">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <not-empty><fail-property resource="OSafeUiLabels" property="EmailAddressMissingError"/></not-empty>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
            <check-errors/>
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
        </if-compare>

        <!-- if username and/or password should be lowercased, do that now -->
        <if-compare field="username_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.USERNAME" method-name="toLowerCase" ret-field="parameters.USERNAME"/>
        </if-compare>
        <if-compare field="password_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.PASSWORD" method-name="toLowerCase" ret-field="parameters.PASSWORD"/>
            <call-object-method obj-field="parameters.CONFIRM_PASSWORD" method-name="toLowerCase" ret-field="parameters.CONFIRM_PASSWORD"/>
        </if-compare>
        <!-- ====================================== -->

        <!-- Check Password Strength -->
        <call-class-method class-name="com.osafe.util.Util" method-name="checkPasswordStrength" ret-field="isValidPass">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <field field="parameters.PASSWORD" type="String"/>
        </call-class-method>
        <if-compare field="isValidPass" operator="not-equals" value="success">
             <set field="tempErrorMessage" from-field="isValidPass"/>
             <string-to-list string="${tempErrorMessage}" message-field="PASSWORD" list="error_list"/>
        </if-compare>

        <!-- Create Map for UserLogin Record -->
        <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
            <simple-map-processor name="newUserLogin">
                <process field="USERNAME"><copy to-field="userLoginId"/><not-empty><fail-property resource="OSafeUiLabels" property="UserLoginMissingError"/></not-empty></process>
                <process field="PASSWORD"><copy to-field="currentPassword"/></process>
                <process field="CONFIRM_PASSWORD">
                    <compare-field operator="equals" field="PASSWORD"><fail-property resource="OSafeUiLabels" property="PasswordMatchError"/></compare-field>
                    <!-- This is checked below in the checkNewPassword method in the bsh block: <not-empty><fail-message message="You must enter your password twice"/></not-empty> -->
                    <copy to-field="currentPasswordVerify"/>
                </process>
                <process field="PASSWORD_HINT"><copy to-field="passwordHint"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <if-not-empty field="userLoginContext.userLoginId">
            <set field="userLoginExistsMap.userLoginId" from-field="userLoginContext.userLoginId"/>
            <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin"/>
            <if-not-empty field="existingUserLogin">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="UserNameInUseError"/>
                <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_CONFIRM" list="error_list"/>
            </if-not-empty>
        </if-not-empty>

        <make-value entity-name="UserLogin" value-field="newUserLogin"/>
        <set from-field="userLoginContext.userLoginId" field="newUserLogin.userLoginId"/>
        <set from-field="userLoginContext.currentPassword" field="newUserLogin.currentPassword"/>
        <set from-field="userLoginContext.passwordHint" field="newUserLogin.passwordHint"/>


        <!-- Check the password, etc for validity -->
        <set field="passwordErrorsList" type="List" />
        <call-bsh><![CDATA[
            List passwordErrorsList = javolution.util.FastList.newInstance();
            String password = (String) userLoginContext.get("currentPassword");
            String confirmPassword = (String) userLoginContext.get("currentPasswordVerify");
            String passwordHint = (String) userLoginContext.get("passwordHint");

            org.ofbiz.common.login.LoginServices.checkNewPassword(newUserLogin, null, password, confirmPassword, passwordHint, passwordErrorsList, true, locale);
        ]]></call-bsh>
        
        <!-- Get errors from method call and associate to field -->
        <if-not-empty  field="passwordErrorsList">
            <log level="info" message="checkNewPassword found errors"/>
            <iterate list="passwordErrorsList" entry="error">
                <string-to-list string="${error}" message-field="PASSWORD" list="error_list"/>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="PersonalInfoValidation" short-description="Personal Information Validation" login-required="false">

        <!-- Validate Information for Creating Person -->
        <call-map-processor in-map-name="parameters" out-map-name="personContext">
            <simple-map-processor name="newPerson">
                <process field="USER_FIRST_NAME">
                    <copy to-field="firstName"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="FirstNameMissingError"/></not-empty>
                </process>
                <process field="USER_MIDDLE_NAME"><copy to-field="middleName"/></process>
                <process field="USER_LAST_NAME">
                    <copy to-field="lastName"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="LastNameMissingError"/></not-empty>
                </process>
                <process field="USER_SUFFIX"><copy to-field="suffix"/></process>
                <process field="USER_BIRTHDATE">
                    <convert type="Date" to-field="birthDate"><fail-property resource="OSafeUiLabels" property="BirthDateMissingError"/></convert>
                </process>
                <!--process field="USER_GENDER">
                    <copy to-field="gender"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="GenderMissingError"/></not-empty>
                </process-->
                <process field="USER_EMAIL">
                    <copy to-field="emailAddress"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="EmailAddressMissingError"/></not-empty>
                    <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                </process>
                <process field="USER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
            <!-- validating Title -->
            <if-compare-field field="parameters.USER_TITLE" operator="not-equals" to-field="nullValue">
                <if-not-empty field="parameters.USER_TITLE">
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="TitleMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="USER_TITLE" list="error_list"/>
                    </else>
                </if-not-empty>
            </if-compare-field>
            <!-- validating Gender -->
            <if-compare-field field="parameters.USER_GENDER" operator="not-equals" to-field="nullValue">
                <if-not-empty field="parameters.USER_GENDER">
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GenderMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="USER_GENDER" list="error_list"/>
                    </else>
                </if-not-empty>
            </if-compare-field>
            <!-- Check the Home Phone -->
            <if-compare field="parameters.PHONE_HOME_REQUIRED" operator="equals" value="true">
                <if>
                    <condition>
                        <or>
                            <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                            <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                        </or>
                    </condition>
                    <then>
                        <!-- Show general error if Home Phone is required -->
                        <call-map-processor in-map-name="parameters" out-map-name="contactHomePhoneMap">
                            <simple-map-processor name="newTelecomNumber">
                                    <make-in-string field="contactNumber">
                                        <in-field field="PHONE_HOME_CONTACT3"/>
                                        <in-field field="PHONE_HOME_CONTACT4"/>
                                    </make-in-string>
                                    <process field="contactNumber"><copy to-field="contactHomePhoneContact"/></process>
                            </simple-map-processor>
                        </call-map-processor>
                        <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                            <field field="parameters.PHONE_HOME_AREA"/>
                            <field field="contactHomePhoneMap.contactHomePhoneContact"/>
                            <field field="parameters.PHONE_HOME_REQUIRED"/>
                        </call-class-method>
                        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                            <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="HomePhoneMissingError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_CONTACT" list="error_list"/>
                            </if-compare>
                            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_CONTACT" list="error_list"/>
                            </if-compare>
                        </if-compare>
                    </then>
                    <else>
                        <call-map-processor in-map-name="parameters" out-map-name="contactHomeOtherPhoneMap">
                            <simple-map-processor name="newTelecomNumber">
                                    <!--make-in-string field="contactNumber">
                                        <in-field field="PHONE_HOME_CONTACT_OTHER3"/>
                                        <in-field field="PHONE_HOME_CONTACT_OTHER4"/>
                                    </make-in-string-->
                                    <process field="PHONE_HOME_CONTACT_OTHER"><copy to-field="contactHomeOtherPhoneContact"/></process>
                            </simple-map-processor>
                        </call-map-processor>
                        <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                            <string value=""/>
                            <field field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"/>
                            <string value="false"/>
                        </call-class-method>
                        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_CONTACT" list="error_list"/>
                            </if-compare>
                        </if-compare>
                        <if-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact">
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="HomePhoneMissingError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_CONTACT" list="error_list"/>
                        </if-empty>
                    </else>
                </if>
            </if-compare>

            <!-- Check the Mobile Phone -->
                <if>
                    <condition>
                        <or>
                            <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                            <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                        </or>
                    </condition>
                    <then>
                        <call-map-processor in-map-name="parameters" out-map-name="contactMobilePhoneMap">
                            <simple-map-processor name="newTelecomNumber">
                                    <make-in-string field="contactNumber">
                                        <in-field field="PHONE_MOBILE_CONTACT3"/>
                                        <in-field field="PHONE_MOBILE_CONTACT4"/>
                                    </make-in-string>
                                    <process field="contactNumber"><copy to-field="contactMobilePhoneContact"/></process>
                            </simple-map-processor>
                        </call-map-processor>
                        <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                            <field field="parameters.PHONE_MOBILE_AREA"/>
                            <field field="contactMobilePhoneMap.contactMobilePhoneContact"/>
                            <string value="false"/>
                        </call-class-method>
                        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="PHONE_MOBILE_CONTACT" list="error_list"/>
                            </if-compare>
                        </if-compare>
                    </then>
                    <else>
                        <if-not-empty field="parameters.PHONE_MOBILE_CONTACT_OTHER">
                            <set field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact" from-field="parameters.PHONE_MOBILE_CONTACT_OTHER"/>
                            <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                                <string value=""/>
                                <field field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact"/>
                                <string value="false"/>
                            </call-class-method>
                            <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                                <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                                    <string-to-list string="${tempErrorMessage}" message-field="PHONE_MOBILE_CONTACT" list="error_list"/>
                                </if-compare>
                            </if-compare>
                        </if-not-empty>
                    </else>
                </if>
    
            <!-- Check the work Phone -->
                <if>
                    <condition>
                        <or>
                            <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                            <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                        </or>
                    </condition>
                    <then>
                        <call-map-processor in-map-name="parameters" out-map-name="contactWorkPhoneMap">
                            <simple-map-processor name="newTelecomNumber">
                                    <make-in-string field="contactNumber">
                                        <in-field field="PHONE_WORK_CONTACT3"/>
                                        <in-field field="PHONE_WORK_CONTACT4"/>
                                    </make-in-string>
                                    <process field="contactNumber"><copy to-field="contactWorkPhoneContact"/></process>
                            </simple-map-processor>
                        </call-map-processor>
                        <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                            <field field="parameters.PHONE_WORK_AREA"/>
                            <field field="contactMobilePhoneMap.contactWorkPhoneContact"/>
                            <field field="parameters.PHONE_WORK_EXT"/>
                            <string value="false"/>
                        </call-class-method>
                        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="PHONE_WORK_CONTACT" list="error_list"/>
                            </if-compare>
                        </if-compare>
                    </then>
                    <else>
                        <if-not-empty field="parameters.PHONE_WORK_CONTACT_OTHER">
                            <set field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact" from-field="parameters.PHONE_WORK_CONTACT_OTHER"/>
                            <set field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContactExt" from-field="parameters.PHONE_WORK_EXT_OTHER"/>
                            <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                                <string value=""/>
                                <field field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact"/>
                                <field field="parameters.PHONE_WORK_EXT_OTHER"/>
                                <string value="false"/>
                            </call-class-method>
                            <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                                <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                                    <string-to-list string="${tempErrorMessage}" message-field="PHONE_WORK_CONTACT" list="error_list"/>
                                </if-compare>
                            </if-compare>
                        </if-not-empty>
                    </else>
                </if>

            <!--  Switched to simple copy on processor since we do all validation above -->
            <if>
               <condition>
                  <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                  </or>
               </condition>
                    <then>
                        <if-not-empty field="contactHomePhoneMap.contactHomePhoneContact">
                            <set field="homePhoneContext.contactNumber" from-field="contactHomePhoneMap.contactHomePhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="homePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_HOME_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_HOME_AREA">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_HOME_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_HOME_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                     </then>
                     <else>
                         <if-not-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact">
                            <set field="homePhoneContext.contactNumber" from-field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="homePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_HOME_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_HOME_AREA_OTHER">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_HOME_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_HOME_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                     </else>
                    </if>

            <!-- Create the Mobile Phone -->
            <if>
               <condition>
                  <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                  </or>
               </condition>
                    <then>
                        <if-not-empty field="contactMobilePhoneMap.contactMobilePhoneContact">
                            <set field="mobilePhoneContext.contactNumber" from-field="contactMobilePhoneMap.contactMobilePhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="mobilePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_MOBILE_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_MOBILE_AREA">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_MOBILE_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_MOBILE_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                    </then>
                <else>
                    <if-not-empty field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact">
                            <set field="mobilePhoneContext.contactNumber" from-field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="mobilePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="PHONE_MOBILE_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_MOBILE_AREA_OTHER">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_MOBILE_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_MOBILE_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                   </else>
            </if>

            <!-- Create the Work Phone -->
            <if>
               <condition>
                  <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                  </or>
               </condition>
                    <then>
                        <if-not-empty field="contactWorkPhoneMap.contactWorkPhoneContact">
                            <set field="workPhoneContext.contactNumber" from-field="contactWorkPhoneMap.contactWorkPhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="workPhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_WORK_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_WORK_AREA">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_WORK_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_WORK_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                    </then>
                <else>
                    <if-not-empty field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact">
                            <set field="workPhoneContext.contactNumber" from-field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact"/>
                            <set field="workPhoneContext.extension" from-field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContactExt"/>
                            <call-map-processor in-map-name="parameters" out-map-name="workPhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_WORK_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_WORK_AREA_OTHER">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_WORK_EXT_OTHER"><copy to-field="extension"/></process>
                                    <process field="PHONE_WORK_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                   </else>
            </if>
            <!-- DOB Short(MMDD) validation -->
            <if-compare-field field="parameters.dobShortMonthUs" operator="not-equals" to-field="nullValue">
                <if-not-empty field="parameters.dobShortMonthUs">
                    <if-not-empty field="parameters.dobShortDayUs">
                        <set field="dobShortMonth" from-field="parameters.dobShortMonthUs"/>
                        <set field="dobShortDay" from-field="parameters.dobShortDayUs"/>
                        <set field="tempDobYear" value="1972"/>
                        <string-append string="${dobShortMonth}" field="dobDateString"/>
                        <string-append string="/" field="dobDateString"/>
                        <string-append string="${dobShortDay}" field="dobDateString"/>
                        <string-append string="/" field="dobDateString"/>
                        <string-append string="${tempDobYear}" field="dobDateString"/>
                        <!-- validates date -->
                        <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isDate" ret-field="isValidDate">
                            <field field="dobDateString" type = "String" />
                        </call-class-method>
                        <if-compare operator="equals" value="true" field="isValidDate" type="Boolean">
                            <string-append string="${dobShortMonth}" field="dobShortDateString"/>
                            <string-append string="/" field="dobShortDateString"/>
                            <string-append string="${dobShortDay}" field="dobShortDateString"/>
                            <set field="DOB_MMDD" from-field="dobShortDateString"/>
                        <else>
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDD" list="error_list"/>
                        </else>
                        </if-compare>
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDD" list="error_list"/>
                    </else>
                    </if-not-empty>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDD" list="error_list"/>
                </else>
                </if-not-empty>
            </if-compare-field>
            
             <!-- DOB Long(MMDDYYYY) validation -->
            <if-compare-field field="parameters.dobLongMonthUs" operator="not-equals" to-field="nullValue">
                <if-not-empty field="parameters.dobLongMonthUs">
                    <if-not-empty field="parameters.dobLongDayUs">
                      <if-not-empty field="parameters.dobLongYearUs">
                        <set field="dobMonth" from-field="parameters.dobLongMonthUs"/>
                        <set field="dobDay" from-field="parameters.dobLongDayUs"/>
                        <set field="dobYear" from-field="parameters.dobLongYearUs"/>
                        <string-append string="${dobMonth}" field="dobLongDateString"/>
                        <string-append string="/" field="dobLongDateString"/>
                        <string-append string="${dobDay}" field="dobLongDateString"/>
                        <string-append string="/" field="dobLongDateString"/>
                        <string-append string="${dobYear}" field="dobLongDateString"/>
                        <!-- validates date -->
                        <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isDate" ret-field="isValidLongDate">
                            <field field="dobLongDateString" type = "String" />
                        </call-class-method>
                        <if-compare operator="equals" value="true" field="isValidLongDate" type="Boolean">
                            <set field="DOB_MMDDYYYY" from-field="dobLongDateString"/>
                        <else>
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDDYYYY" list="error_list"/>
                        </else>
                        </if-compare>
                       <else>
                           <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                           <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDDYYYY" list="error_list"/>
                       </else>
                    </if-not-empty>
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDDYYYY" list="error_list"/>
                    </else>
                    </if-not-empty>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDDYYYY" list="error_list"/>
                </else>
                </if-not-empty>
            </if-compare-field>

            <!-- DOB Short(DDMM) validation -->
            <if-compare-field field="parameters.dobShortMonthUk" operator="not-equals" to-field="nullValue">
                <if-not-empty field="parameters.dobShortMonthUk">
                    <if-not-empty field="parameters.dobShortDayUk">
                        <set field="dobShortMonth" from-field="parameters.dobShortMonthUk"/>
                        <set field="dobShortDay" from-field="parameters.dobShortDayUk"/>
                        <set field="tempDobYear" value="1972"/>
                        <string-append string="${dobShortMonth}" field="dobDateString"/>
                        <string-append string="/" field="dobDateString"/>
                        <string-append string="${dobShortDay}" field="dobDateString"/>
                        <string-append string="/" field="dobDateString"/>
                        <string-append string="${tempDobYear}" field="dobDateString"/>
                        <!-- validates date -->
                        <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isDate" ret-field="isValidDate">
                            <field field="dobDateString" type = "String" />
                        </call-class-method>
                        <if-compare operator="equals" value="true" field="isValidDate" type="Boolean">
                            <string-append string="${dobShortDay}" field="dobShortDateString"/>
                            <string-append string="/" field="dobShortDateString"/>
                            <string-append string="${dobShortMonth}" field="dobShortDateString"/>
                            <set field="DOB_DDMM" from-field="dobShortDateString"/>
                        <else>
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMM" list="error_list"/>
                        </else>
                        </if-compare>
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMM" list="error_list"/>
                    </else>
                    </if-not-empty>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMM" list="error_list"/>
                </else>
                </if-not-empty>
            </if-compare-field>
            
             <!-- DOB Long(DDMMYYYY) validation -->
            <if-compare-field field="parameters.dobLongMonthUk" operator="not-equals" to-field="nullValue">
                <if-not-empty field="parameters.dobLongMonthUk">
                    <if-not-empty field="parameters.dobLongDayUk">
                      <if-not-empty field="parameters.dobLongYearUk">
                        <set field="dobMonth" from-field="parameters.dobLongMonthUk"/>
                        <set field="dobDay" from-field="parameters.dobLongDayUk"/>
                        <set field="dobYear" from-field="parameters.dobLongYearUk"/>
                        <string-append string="${dobMonth}" field="dobLongDateString"/>
                        <string-append string="/" field="dobLongDateString"/>
                        <string-append string="${dobDay}" field="dobLongDateString"/>
                        <string-append string="/" field="dobLongDateString"/>
                        <string-append string="${dobYear}" field="dobLongDateString"/>
                        <!-- validates date -->
                        <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isDate" ret-field="isValidLongDate">
                            <field field="dobLongDateString" type = "String" />
                        </call-class-method>
                        <if-compare operator="equals" value="true" field="isValidLongDate" type="Boolean">
                            <string-append string="${dobDay}" field="DOB_DDMMYYYY"/>
                            <string-append string="/" field="DOB_DDMMYYYY"/>
                            <string-append string="${dobMonth}" field="DOB_DDMMYYYY"/>
                            <string-append string="/" field="DOB_DDMMYYYY"/>
                            <string-append string="${dobYear}" field="DOB_DDMMYYYY"/>
                        <else>
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMMYYYY" list="error_list"/>
                        </else>
                        </if-compare>
                       <else>
                           <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                           <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMMYYYY" list="error_list"/>
                       </else>
                    </if-not-empty>
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMMYYYY" list="error_list"/>
                    </else>
                    </if-not-empty>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMMYYYY" list="error_list"/>
                </else>
                </if-not-empty>
            </if-compare-field>
    </simple-method>

    <simple-method method-name="validateBillingAddress" short-description="validate Customer/Billing Address" login-required="false">
        <call-map-processor in-map-name="parameters" out-map-name="addressContext">
            <simple-map-processor name="newPerson">
                <make-in-string field="fullName">
                    <in-field field="USER_FIRST_NAME"/><constant> </constant>
                    <in-field field="USER_MIDDLE_NAME"/><constant> </constant>
                    <in-field field="USER_LAST_NAME"/>
                </make-in-string>
                <process field="roleTypeId"><copy/></process>
                <process field="fullName"><copy to-field="toName"/></process>
                <process field="BILLING_ATTN_NAME"><copy to-field="attnName"/></process>
                <process field="BILLING_ADDRESS1">
                    <copy to-field="address1"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="AddressLine1MissingError"/></not-empty>
                </process>
                <process field="BILLING_ADDRESS2"><copy to-field="address2"/></process>
                <process field="BILLING_CITY">
                    <copy to-field="city"/>
                </process>
                <process field="BILLING_STATE"><copy to-field="stateProvinceGeoId"/></process>
                <process field="BILLING_POSTAL_CODE">
                    <copy to-field="postalCode"/>
                </process>
                <process field="BILLING_COUNTRY">
                    <copy to-field="countryGeoId"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="CountryMissingError"/></not-empty>
                </process>
                <process field="BILLING_ADDRESS_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
        <if-empty field="parameters.BILLING_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.BILLING_COUNTRY">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="BILLING_POSTAL_CODE" list="error_list"/>
            </if-compare>
            <if-compare value="CAN" operator="equals" field="parameters.BILLING_COUNTRY">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="PostalCodeMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="BILLING_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </if-empty>

        <!--Check for countries other than US and Canada that Two of either Address-2, Address-3, Zip/Postal, City/Town or State/Province must be entered -->
        <if>
            <condition>
                <or>
                    <if-compare value="CAN" operator="equals" field="parameters.BILLING_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.BILLING_COUNTRY"></if-compare>
                </or>
            </condition>
            <then>
                <if-empty field="parameters.BILLING_CITY">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="BILLING_CITY" list="error_list"/>
                </if-empty>
                <if-empty field="parameters.BILLING_STATE">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="BILLING_STATE" list="error_list"/>
                </if-empty>
            </then>
            <else>
                <set field="fieldCounter" value="0" type="Integer"/>
                <if-not-empty field="parameters.BILLING_ADDRESS2">
                    <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                </if-not-empty>
                <if-empty field="parameters.BILLING_STATE">
                    <set field="addressContext.stateProvinceGeoId" value="_NA_" type="String"/>
                    <set field="parameters.BILLING_STATE" value="_NA_" type="String"/>
                </if-empty>
                <if-compare field="parameters.BILLING_STATE" operator="equals" value="_NA_">
                    <if-not-empty field="parameters.BILLING_ADDRESS3">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                <else>
                    <if-not-empty field="parameters.BILLING_STATE">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                </else>
                </if-compare>
                <if-not-empty field="parameters.BILLING_CITY">
                    <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                <else>
                    <set field="addressContext.city" value="_NA_"/>
                </else>
                </if-not-empty>
                <if-not-empty field="parameters.BILLING_POSTAL_CODE">
                    <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                <else>
                    <set field="addressContext.postalCode" value="_NA_"/>
                </else>
                </if-not-empty>
                <if-compare field="fieldCounter" operator="less"  value="2" type="Integer">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressIncompleteError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS_ERROR" list="error_list"/>
                </if-compare>
            </else>
        </if>
        
        <!-- Check for a valid Postal Code For USA only -->
        <if-not-empty field="parameters.BILLING_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.BILLING_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.BILLING_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="BILLING_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </if-not-empty>

        <!-- Check for a address3 -->
        <if-compare field="parameters.BILLING_STATE" operator="equals" value="_NA_">
            <set field="addressContext.address3" from-field="parameters.BILLING_ADDRESS3"/>
        </if-compare>

            <return response-code="success"/>
    </simple-method>

    <simple-method method-name="validateShippingAddress" short-description="validate Shipping Address" login-required="false">
        <call-map-processor in-map-name="parameters" out-map-name="shippingAddressContext">
            <simple-map-processor name="newPerson">
                <make-in-string field="fullName">
                    <in-field field="USER_FIRST_NAME"/><constant> </constant>
                    <in-field field="USER_MIDDLE_NAME"/><constant> </constant>
                    <in-field field="USER_LAST_NAME"/>
                </make-in-string>
                <process field="fullName"><copy to-field="toName"/></process>
                <process field="roleTypeId"><copy/></process>
                <process field="SHIPPING_ATTN_NAME">
                    <copy to-field="attnName"/>
                </process>
                <process field="SHIPPING_ADDRESS1">
                    <copy to-field="address1"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="AddressLine1MissingError"/></not-empty>
                </process>
                <process field="SHIPPING_ADDRESS2"><copy to-field="address2"/></process>
                <process field="SHIPPING_CITY"><copy to-field="city"/></process>
                <process field="SHIPPING_STATE"><copy to-field="stateProvinceGeoId"/></process>
                <process field="SHIPPING_POSTAL_CODE"><copy to-field="postalCode"/></process>
                <process field="SHIPPING_COUNTRY">
                    <copy to-field="countryGeoId"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="CountryMissingError"/></not-empty>
                </process>
                <process field="SHIPPING_ADDRESS_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>

        <if-compare-field field="parameters.SHIPPING_ATTN_NAME" operator="not-equals" to-field="nullValue">
            <if-empty field="parameters.SHIPPING_ATTN_NAME ">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressNickNameMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ATTN_NAME" list="error_list"/>
            </if-empty>
        </if-compare-field>

        <if-empty field="parameters.SHIPPING_POSTAL_CODE ">
            <if-compare value="USA" operator="equals" field="parameters.SHIPPING_COUNTRY">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_POSTAL_CODE" list="error_list"/>
            </if-compare>
            <if-compare value="CAN" operator="equals" field="parameters.SHIPPING_COUNTRY">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="PostalCodeMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </if-empty>

        <!--Check for countries other than US and Canada that Two of either Address-2, Address-3, Zip/Postal, City/Town or State/Province must be entered -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.SHIPPING_COUNTRY"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.SHIPPING_COUNTRY"></if-compare>
                    </or>
                </condition>
                <then>
                    <if-empty field="parameters.SHIPPING_CITY">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_CITY" list="error_list"/>
                    </if-empty>
                    <if-empty field="parameters.SHIPPING_STATE">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_STATE" list="error_list"/>
                    </if-empty>
                </then>
                <else>
                    <set field="fieldCounter" value="0" type="Integer"/>
                    <if-not-empty field="parameters.SHIPPING_ADDRESS2">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <if-empty field="parameters.SHIPPING_STATE">
                        <set field="addressContext.stateProvinceGeoId" value="_NA_" type="String"/>
                        <set field="parameters.SHIPPING_STATE" value="_NA_" type="String"/>
                    </if-empty>
                    <if-compare field="parameters.SHIPPING_STATE" operator="equals" value="_NA_">
                        <if-not-empty field="parameters.SHIPPING_ADDRESS3">
                            <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                        </if-not-empty>
                    <else>
                        <if-not-empty field="parameters.SHIPPING_STATE">
                            <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                        </if-not-empty>
                    </else>
                    </if-compare>
                    <if-not-empty field="parameters.SHIPPING_CITY">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    <else>
                        <set field="addressContext.city" value="_NA_"/>
                    </else>
                    </if-not-empty>
                    <if-not-empty field="parameters.SHIPPING_POSTAL_CODE">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    <else>
                        <set field="addressContext.postalCode" value="_NA_"/>
                    </else>
                    </if-not-empty>
                    <if-compare field="fieldCounter" operator="less"  value="2" type="Integer">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressIncompleteError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ADDRESS_ERROR" list="error_list"/>
                    </if-compare>
                </else>
        </if>

        <!-- Check for a valid Postal Code For USA only -->
        <if-not-empty field="parameters.SHIPPING_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.SHIPPING_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.SHIPPING_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </if-not-empty>

        <!-- Check for a address3 -->
        <if-compare field="parameters.SHIPPING_STATE" operator="equals" value="_NA_">
            <set field="shippingAddressContext.address3" from-field="parameters.SHIPPING_ADDRESS3"/>
        </if-compare>

                <return response-code="success"/>
    </simple-method>

    <simple-method method-name="validateRequestCatalog" short-description="validate Request catalog" login-required="false">
        <clear-field field="tempErrorMessage"/>
        <!-- Check Contact Us form -->

        <call-map-processor in-map-name="parameters" out-map-name="custRequestContext">
            <simple-map-processor name="custRequest">
                <process field="REQ_CATALOG_FIRST_NAME"><copy to-field="firstName"/></process>
                <process field="REQ_CATALOG_LAST_NAME"><copy to-field="lastName"/></process>
                <process field="REQ_CATALOG_ADDRESS1"><copy to-field="address1"/></process>
                <process field="REQ_CATALOG_ADDRESS2"><copy to-field="address2"/></process>
                <process field="REQ_CATALOG_CITY"><copy to-field="city"/></process>
                <process field="REQ_CATALOG_STATE"><copy to-field="stateCode"/></process>
                <process field="REQ_CATALOG_POSTAL_CODE"><copy to-field="postalCode"/></process>
                <process field="REQ_CATALOG_COUNTRY"><copy to-field="countryCode"/></process>
                <process field="REQ_CATALOG_HOME_AREA"><copy to-field="contactPhoneArea"/></process>
                <process field="REQ_CATALOG_HOME_CONTACT3"><copy to-field="contactPhoneContact3"/></process>
                <process field="REQ_CATALOG_HOME_CONTACT4"><copy to-field="contactPhoneContact4"/></process>
                <process field="REQ_CATALOG_HOME_CONTACT_OTHER"><copy to-field="phoneNumber"/></process>
                <process field="REQ_CATALOG_EMAIL_ADDR"><copy to-field="emailAddress"/></process>
                <process field="content"><copy to-field="content"/></process>
            </simple-map-processor>
        </call-map-processor>

        <if-empty field="parameters.REQ_CATALOG_FIRST_NAME">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_FIRST_NAME" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.REQ_CATALOG_LAST_NAME">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_LAST_NAME" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.REQ_CATALOG_ADDRESS1">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine1MissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_ADDRESS1" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.REQ_CATALOG_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.REQ_CATALOG_COUNTRY">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_POSTAL_CODE" list="error_list"/>
            </if-compare>
            <if-compare value="CAN" operator="equals" field="parameters.REQ_CATALOG_COUNTRY">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="PostalCodeMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_POSTAL_CODE" list="error_list"/>
            </if-compare>
        <else>
        <!-- Check for a valid Postal Code -->
            <if-compare value="USA" operator="equals" field="parameters.REQ_CATALOG_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.REQ_CATALOG_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </else>
        </if-empty>
        <if-empty field="parameters.REQ_CATALOG_COUNTRY">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CountryInUsMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_COUNTRY" list="error_list"/>
        </if-empty>
        <if>
            <condition>
                <or>
                    <if-compare value="CAN" operator="equals" field="parameters.REQ_CATALOG_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.REQ_CATALOG_COUNTRY"></if-compare>
                </or>
            </condition>
            <then>
                <if-empty field="parameters.REQ_CATALOG_CITY">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_CITY" list="error_list"/>
                </if-empty>
                <if-empty field="parameters.REQ_CATALOG_STATE">
                    <if-compare value="USA" operator="equals" field="parameters.REQ_CATALOG_COUNTRY">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_STATE" list="error_list"/>
                    </if-compare>
                    <if-compare value="CAN" operator="equals" field="parameters.REQ_CATALOG_COUNTRY">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ProvinceMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_STATE" list="error_list"/>
                    </if-compare>
                </if-empty>
                
            </then>
                <else>
                    <set field="fieldCounter" value="0" type="Integer"/>
                    <if-not-empty field="parameters.address2">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <if-compare field="parameters.REQ_CATALOG_STATE" operator="equals" value="_NA_">
                        <if-not-empty field="parameters.address3">
                            <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                        </if-not-empty>
                    <else>
                        <if-not-empty field="parameters.REQ_CATALOG_STATE">
                            <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                        </if-not-empty>
                    </else>
                    </if-compare>
                    <if-not-empty field="parameters.REQ_CATALOG_CITY">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    <else>
                        <set field="city" value="_NA_"/>
                    </else>
                    </if-not-empty>
                    <if-not-empty field="parameters.REQ_CATALOG_POSTAL_CODE">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    <else>
                        <set field="postalCode" value="_NA_"/>
                    </else>
                    </if-not-empty>
                    <if-compare field="fieldCounter" operator="less"  value="2" type="Integer">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressIncompleteError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_ADDRESS_ERROR" list="error_list"/>
                    </if-compare>
                </else>

        </if>
        <if-empty field="parameters.REQ_CATALOG_EMAIL_ADDR">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailAddressMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_EMAIL_ADDR" list="error_list"/>
        </if-empty>
        <if-not-empty field="parameters.REQ_CATALOG_EMAIL_ADDR">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="REQ_CATALOG_EMAIL_ADDR">
                        <copy to-field="REQ_CATALOG_EMAIL_ADDR"/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailInvalidError"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>
        <!-- Check the Home Phone -->
        <if-compare field="parameters.REQ_CATALOG_HOME_REQUIRED" operator="equals" value="true">
            <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.REQ_CATALOG_COUNTRY"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.REQ_CATALOG_COUNTRY"></if-compare>
                    </or>
                </condition>
                <then>
                    <!-- Show general error if Home Phone is required -->
                    <call-map-processor in-map-name="parameters" out-map-name="contactHomePhoneMap">
                        <simple-map-processor name="newTelecomNumber">
                                <make-in-string field="contactNumber">
                                    <in-field field="REQ_CATALOG_HOME_CONTACT3"/>
                                    <in-field field="REQ_CATALOG_HOME_CONTACT4"/>
                                </make-in-string>
                                <process field="contactNumber"><copy to-field="contactHomePhoneContact"/></process>
                        </simple-map-processor>
                    </call-map-processor>
                    <if>
                        <condition>
                            <or>
                                <and>
                                    <not><if-empty field="parameters.REQ_CATALOG_HOME_AREA"/></not>
                                    <if-empty field="contactHomePhoneMap.contactHomePhoneContact"/>
                                </and>
                                <and>
                                    <not><if-empty field="contactHomePhoneMap.contactHomePhoneContact"/></not>
                                    <if-empty field="parameters.REQ_CATALOG_HOME_AREA"/>
                                </and>
                            </or>
                        </condition>
                        <then>
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_HOME_CONTACT" list="error_list"/>
                        </then>
                        <else>
                            <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                                <field field="parameters.REQ_CATALOG_HOME_AREA"/>
                                <field field="contactHomePhoneMap.contactHomePhoneContact"/>
                                <field field="N" type="String"/>
                            </call-class-method>
                            <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                                <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                                    <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_HOME_CONTACT" list="error_list"/>
                                </if-compare>
                            </if-compare>
                        </else>
                    </if>
                    
                </then>
                <else>
                    <call-map-processor in-map-name="parameters" out-map-name="contactHomeOtherPhoneMap">
                        <simple-map-processor name="newTelecomNumber">
                                <process field="REQ_CATALOG_HOME_CONTACT_OTHER"><copy to-field="contactHomeOtherPhoneContact"/></process>
                        </simple-map-processor>
                    </call-map-processor>
                    <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                        <string value=""/>
                        <field field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"/>
                        <field field="N" type="String"/>
                    </call-class-method>
                    <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                        <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_HOME_CONTACT" list="error_list"/>
                        </if-compare>
                    </if-compare>
                </else>
            </if>
        </if-compare>

        <check-errors/>
    </simple-method>
    
    <simple-method method-name="validateAddress" short-description="Validate Address" login-required="false">
        <set field="fieldCounter" value="0" type="Integer"/>
        <!-- Check address fields on the Postal Address -->
         <if-compare value="USA" operator="equals" field="parameters.CUSTOMER_COUNTRY">
             <if-empty field="parameters.CUSTOMER_STATE">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_STATE" list="error_list"/>
             </if-empty>
         </if-compare>
         <if-compare value="CAN" operator="equals" field="parameters.CUSTOMER_COUNTRY">
             <if-empty field="parameters.CUSTOMER_STATE">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_STATE" list="error_list"/>
             </if-empty>
         </if-compare>
         <call-map-processor in-map-name="parameters" out-map-name="addressContext">
             <simple-map-processor name="address">
                <make-in-string field="fullName">
                     <in-field field="CUSTOMER_FIRST_NAME"/><constant> </constant>
                     <in-field field="CUSTOMER_LAST_NAME"/>
                </make-in-string>
                <process field="CUSTOMER_FIRST_NAME">
                    <copy to-field="firstName"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="FirstNameMissingError"/></not-empty>
                </process>
                <process field="CUSTOMER_LAST_NAME">
                    <copy to-field="lastName"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="LastNameMissingError"/></not-empty>
                </process>

                 <process field="fullName"><copy to-field="toName"/></process>
                 <process field="CUSTOMER_ATTN_NAME">
                     <copy to-field="attnName"/>
                     <not-empty><fail-property resource="OSafeUiLabels" property="AddressNickNameMissingError"/></not-empty>
                 </process>
                 <process field="CUSTOMER_ADDRESS1">
                     <copy to-field="address1"/>
                     <not-empty><fail-property resource="OSafeUiLabels" property="AddressLine1MissingError"/></not-empty>
                 </process>
                 <process field="CUSTOMER_ADDRESS2"><copy to-field="address2"/></process>
                 <process field="CUSTOMER_CITY">
                     <copy to-field="city"/>
                 </process>
                 <process field="CUSTOMER_STATE"><copy to-field="stateProvinceGeoId"/></process>
                 <process field="CUSTOMER_POSTAL_CODE">
                     <copy to-field="postalCode"/>
                 </process>
                 <process field="CUSTOMER_COUNTRY">
                     <copy to-field="countryGeoId"/>
                     <not-empty><fail-property resource="OSafeUiLabels" property="CountryMissingError"/></not-empty>
                 </process>
             </simple-map-processor>
         </call-map-processor>


        <!--Check for countries other than US and Canada that Two of either Address-2, Address-3, Zip/Postal, City/Town or State/Province must be entered -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.CUSTOMER_COUNTRY"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.CUSTOMER_COUNTRY"></if-compare>
                    </or>
                </condition>
                <then>
                    <if-empty field="parameters.CUSTOMER_CITY">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_CITY" list="error_list"/>
                    </if-empty>
                    <if-empty field="parameters.CUSTOMER_POSTAL_CODE">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_POSTAL_CODE" list="error_list"/>
                    </if-empty>
                </then>
                <else>
                    <if-not-empty field="parameters.CUSTOMER_ADDRESS2">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <if-compare field="parameters.CUSTOMER_STATE" operator="equals" value="_NA_">
                        <if-not-empty field="parameters.CUSTOMER_ADDRESS3">
                            <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                        </if-not-empty>
                    <else>
                        <if-not-empty field="parameters.CUSTOMER_STATE">
                            <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                        </if-not-empty>
                    </else>
                    </if-compare>
                    <if-not-empty field="parameters.CUSTOMER_CITY">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <if-not-empty field="parameters.CUSTOMER_POSTAL_CODE">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <if-compare field="fieldCounter" operator="less"  value="2" type="Integer">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressIncompleteError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ADDRESS_ERROR" list="error_list"/>
                    </if-compare>
                </else>
        </if>

        <!-- Check for a valid Postal Code For USA only -->
        <if-not-empty field="parameters.CUSTOMER_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.CUSTOMER_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.CUSTOMER_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </if-not-empty>

        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>

    </simple-method>

    <simple-method method-name="validateCreditCard" short-description="Validate Credit Card fields" login-required="false">
        <log level="info" message="${parameters.fieldLevelErrors}"></log>
        <if-compare field="parameters.fieldLevelErrors" operator="equals" value="Y">
            <set field="fieldLevelErrors" value="${parameters.fieldLevelErrors}"/>
            <field-to-request field="fieldLevelErrors" />
        </if-compare>

        <if-compare field="parameters.useSavedCard" operator="equals" value="Y" type="String">
            <if-compare-field field="parameters.savedVerificationNo" operator="not-equals" to-field="nullValue">
                <if-empty field="parameters.savedVerificationNo">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="VerificationNumberMissingError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="savedVerificationNo" list="error_list"/>
                    <else>
                        <call-class-method method-name="isInteger" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isInteger">
                             <field field="parameters.savedVerificationNo" type="String"/>
                        </call-class-method>
                        <if-compare operator="equals" value="false" field="isInteger">
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="VerificationNumberMissingError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="savedVerificationNo" list="error_list"/>
                        </if-compare>
                    </else>
                </if-empty>
            </if-compare-field>
            <if-empty field="parameters.savedCard">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="SavedCardMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="savedCard" list="error_list"/>
                <else>
                    <entity-one value-field="savedCreditCard" entity-name="CreditCard">
                        <field-map field-name="paymentMethodId" from-field="parameters.savedCard"/>
                    </entity-one>
                    <set field="creditCardContext.cardType" from-field="savedCreditCard.cardType"/>
                    <set field="creditCardContext.cardNumber" from-field="savedCreditCard.cardNumber"/>
                    <set field="creditCardContext.expireDate" from-field="savedCreditCard.expireDate"/>
                    <set field="creditCardContext.companyNameOnCard" from-field="savedCreditCard.companyNameOnCard"/>
                    <set field="creditCardContext.titleOnCard" from-field="savedCreditCard.titleOnCard"/>
                    <set field="creditCardContext.firstNameOnCard" from-field="savedCreditCard.firstNameOnCard"/>
                    <set field="creditCardContext.middleNameOnCard" from-field="savedCreditCard.middleNameOnCard"/>
                    <set field="creditCardContext.lastNameOnCard" from-field="savedCreditCard.lastNameOnCard"/>
                    <set field="creditCardContext.suffixOnCard" from-field="savedCreditCard.suffixOnCard"/>
                    <set field="creditCardContext.cardNumber" from-field="savedCreditCard.cardNumber"/>
                    <set field="creditCardContext.contactMechId" from-field="parameters.contactMechId"/>
                </else>
            </if-empty>
        <else>
            <!-- Check credit card fields -->
            <if-compare-field field="parameters.verificationNo" operator="not-equals" to-field="nullValue">
                <if-empty field="parameters.verificationNo">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="VerificationNumberMissingError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="verificationNo" list="error_list"/>
                    <else>
                        <call-class-method method-name="isInteger" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isInteger">
                             <field field="parameters.verificationNo" type="String"/>
                        </call-class-method>
                        <if-compare operator="equals" value="false" field="isInteger">
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="VerificationNumberMissingError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="verificationNo" list="error_list"/>
                        </if-compare>
                    </else>
                </if-empty>
            </if-compare-field>
             <call-map-processor in-map-name="parameters" out-map-name="creditCardContext">
                  <simple-map-processor name="createCreditCard">
                    <make-in-string field="expireDate">
                      <in-field field="expMonth"/>
                      <constant>/</constant>
                      <in-field field="expYear"/>
                    </make-in-string>
                    <process field="partyId"><copy/></process>
                    <process field="companyNameOnCard"><copy/></process>
                    <process field="titleOnCard"><copy/></process>
                    <process field="firstNameOnCard"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="FirstNameOnCardMissingError"/></not-empty></process>
                    <process field="middleNameOnCard"><copy/></process>
                    <process field="lastNameOnCard"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="LastNameOnCardMissingError"/></not-empty></process>
                    <process field="suffixOnCard"><copy/></process>
                    <process field="cardType"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="CardTypeMissingError"/></not-empty></process>
                    <process field="cardNumber"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="CardNumberMissingError"/></not-empty></process>
                    <process field="contactMechId"><copy/></process>
                    <process field="description"><copy/></process>
                    <process field="expMonth"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="ExpirationMonthMissingError"/></not-empty></process>
                    <process field="expYear"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="ExpirationYearMissingError"/></not-empty></process>
                    <process field="expireDate"><copy/></process>
                  </simple-map-processor>
    
             </call-map-processor>
             <if-not-empty field="parameters.expMonth">
               <if-validate-method field="creditCardContext.expireDate" method="isDateBeforeToday" >
                   <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ExpirationDateIsBeforeTodayError"/>
                   <string-to-list string="${tempErrorMessage}" message-field="expMonth" list="error_list"/>
               </if-validate-method>
            </if-not-empty>

            <!-- credit card number validation -->
            <if-not-empty field="creditCardContext.cardNumber">
                <call-class-method method-name="isInteger" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isInteger">
                     <field field="creditCardContext.cardNumber" type="String"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isInteger">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CreditCardNumberInvalidError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                <else>
                    <if-empty field="creditCardContext.cardType">
                        <call-class-method method-name="isCreditCard" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isCreditCard">
                             <field field="creditCardContext.cardNumber" type="String"/>
                        </call-class-method>
                        <if-compare field="isCreditCard" operator="equals" value="false">
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CreditCardNumberInvalidError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                        </if-compare>
                    <else>
                        <call-class-method method-name="isCardMatch" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isCardMatch">
                            <field field="creditCardContext.cardType" type="String"/>
                             <field field="creditCardContext.cardNumber" type="String"/>
                        </call-class-method>
                        <if-compare field="isCardMatch" operator="equals" value="false">
                            <call-class-method method-name="getCardType" class-name="org.ofbiz.base.util.UtilValidate" ret-field="suggestCardType">
                                 <field field="creditCardContext.cardNumber" type="String"/>
                            </call-class-method>
                            <if-compare field="suggestCardType" operator="equals" value="Unknown">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CreditCardNumberInvalidError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                            <else>
                                <set field="argListNames[]" from-field="creditCardContext.cardNumber"/>
                                <set field="argListNames[]" from-field="creditCardContext.cardType"/>
                                <set field="argListNames[]" from-field="suggestCardType"/>
                                <property-to-field resource="OSafeUiLabels" property="CreditCardNumberInvalidSuggestError" field="tempErrorMessage" arg-list-name="argListNames"/>
                                <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                            </else>
                            </if-compare>
                        </if-compare>
                    </else>
                    </if-empty>
                </else>
                </if-compare>
            </if-not-empty>

        </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="validateContactUs" short-description="validate Conatact Us" login-required="false">
        <!-- Check Contact Us form -->
        <call-map-processor in-map-name="parameters" out-map-name="custRequestContext">
            <simple-map-processor name="custRequest">
                <process field="contactReason"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="ContactReasonMissingError"/></not-empty></process>
                <process field="emailAddress"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="EmailAddressMissingError"/></not-empty></process>
                <process field="firstName"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="FirstNameMissingError"/></not-empty></process>
                <process field="lastName"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="LastNameMissingError"/></not-empty></process>
                <process field="content"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="CommentMissingError"/></not-empty></process>
                <process field="contactPhoneArea"><copy/></process>
                <process field="contactPhoneContact3"><copy/></process>
                <process field="contactPhoneContact4"><copy/></process>
                <process field="contactPhoneNumber"><copy to-field="phoneNumber"/></process>
                <process field="orderIdNumber"><copy/></process>
            </simple-map-processor>
        </call-map-processor>
        <if-not-empty field="parameters.emailAddress">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="emailAddress">
                        <copy to-field="emailAddress"/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailInvalidError"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>
        <check-errors/>
    </simple-method>

</simple-methods>