<?xml version="1.0" encoding="UTF-8" ?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">


    <simple-method method-name="getCheckoutFlow" short-description="Get Checkout Flow mutli or single step" login-required="false">
        <!-- if shipping does not apply, then remove shipping method and carrier  -->
        <session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        <if-compare operator="equals" value="false" field="shippingApplies">
            <call-object-method obj-field="shoppingCart" method-name="setShipmentMethodTypeId">
                <string value="NO_SHIPPING" />
            </call-object-method>
            <call-object-method obj-field="shoppingCart" method-name="setCarrierPartyId">
                <string value="_NA_" />
            </call-object-method>
        </if-compare>
        
        <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="isCheckoutSinglePage">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <string value="CHECKOUT_SINGLE_PAGE"/>
        </call-class-method>

        <session-to-field field="userLogin"/>
        <if>
          <condition>
              <or>
                  <if-empty field="userLogin"/>
                  <if-compare operator="equals" value="anonymous" field="userLogin.userLoginId"></if-compare>
              </or>
          </condition>
          <then>
              <set field="isAnonymous" value="TRUE"/>
          </then>
          <else>
              <set field="isAnonymous" value="FALSE"/>
          </else>
        </if>

        <if-validate-method class="com.osafe.util.Util" field="isCheckoutSinglePage" method="isProductStoreParmTrue">
            <if-compare operator="equals" value="TRUE" field="isAnonymous">
                <return response-code="anonSinglePage"/>
                <else>
                    <return response-code="singlePage"/>
                </else>
            </if-compare>
        <else>
            <if-compare operator="equals" value="TRUE" field="isAnonymous">
                <return response-code="anonMultiPage"/>
                <else>
                    <return response-code="multiPage"/>
                </else>
            </if-compare>
        </else>
        </if-validate-method>
    </simple-method>


<!--  CHECKOUT   -->    

    <simple-method method-name="singlePageSubmitOrder" short-description="submit order for single page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <set field="remainingAmount" value="${groovy: return shoppingCart.getGrandTotal().subtract(shoppingCart.getPaymentTotal());}"/>

        <session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalBillingAttributeInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        
        <!-- DETERMINE BILLING ADDRESS -->
        <if-not-empty field="parameters.BILLING_USE_SCREEN">
        	<call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        	<else>
        		<if-not-empty field="parameters.PERSONAL_USE_SCREEN">
	        		<!-- If BILLING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
	        		<call-simple-method method-name="validatePersonalInfoBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        		<else>
	        			<!-- Use Shipping Address Divs for Billing -->
	        			<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
	        				<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        				<map-to-map map="shippingAddressContext" to-map="billingAddressContext"/>
	        			</if-not-empty>
	        		</else>
        		</if-not-empty>
        	</else>
        </if-not-empty>

        <if-compare operator="greater" value="0.0" field="remainingAmount">
	        <call-simple-method method-name="checkPaymentMethodType" />
	        <if-compare operator="equals" value="false" field="failedProcessPayment" >
	            <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	                <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	            </if-compare>
	        <else>
	            <return response-code="paymentError"/>
	        </else>
	        </if-compare>
        </if-compare>
        
        <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="deliveryOption">
            <string value="DELIVERY_OPTION"/>
        </call-object-method>
        
        <if-compare operator="not-equals" value="SHIP_TO_MULTI" field="deliveryOption">
        	<!-- If SHIPPING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
        	<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
	        	<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        	<else>
	        		<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
	        		<clear-field field="shippingAddressContext.attnName"/>
	        	</else>
	        </if-not-empty>
	        
	        <!--  if shipping applies and there is no shipping option selected and no store selected then return error -->
	        <if-compare operator="equals" value="true" field="shippingApplies">
	            <if-empty field="parameters.shipping_method">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoShippingMethodError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="NO_SHIPPING_METHOD" list="error_list"/>
	            <else>
	                <!--  Validation for store pickup -->
	                <if-compare operator="equals" value="NO_SHIPPING@_NA_" field="parameters.shipping_method">
				        <if-not-empty field="parameters.oneStoreOpen">
				        	<if-compare operator="equals" value="Y" field="parameters.oneStoreOpen">
						        <if-not-empty field="parameters.storeId">
						            <session-to-field field="shoppingCart"/>
						            <if-not-empty field="shoppingCart">
						                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
						                    <string value="STORE_LOCATION"/>
						                    <field field="parameters.storeId" type="String"/>
						                </call-object-method>
						            </if-not-empty>
						        </if-not-empty>
					        </if-compare>
				        </if-not-empty>
	                    <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="checkStoreId">
	                        <string value="STORE_LOCATION"/>
	                    </call-object-method>
	                    <if-empty field="checkStoreId">
	                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoStoreForPickupError"/>
	                        <string-to-list string="${tempErrorMessage}" message-field="NO_STORE_PICKUP" list="error_list"/>
	                    </if-empty>
	                </if-compare>
	            </else>
	            </if-empty>
	        <else>
	            <call-object-method obj-field="shoppingCart" method-name="setShipmentMethodTypeId">
	                <string value="NO_SHIPPING" />
	            </call-object-method>
	            <call-object-method obj-field="shoppingCart" method-name="setCarrierPartyId">
	                <string value="_NA_" />
	            </call-object-method>
	        </else>
	        </if-compare>
	    </if-compare>
        
        <check-errors/>

        <if-not-empty field="parameters.shipping_instructions">
            <call-object-method method-name="setAllShippingInstructions" obj-field="shoppingCart">
                <field field="parameters.shipping_instructions"/>
            </call-object-method>
        </if-not-empty>
        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createOrderContactMech"/>

        <if-compare operator="greater" value="0.0" field="remainingAmount">
	        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	            <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
	            <call-simple-method method-name="createCreditCardPayment"/>
	            <return response-code="creditCard"/>
	         <else>
	              <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
	                   <call-simple-method method-name="createCashOnDeliveryPayment"/>
	                   <return response-code="cod"/>
	              </if-compare>
	         </else>
	        </if-compare>
        </if-compare>
    </simple-method>

    <simple-method method-name="multiPageSubmitOrder" short-description="submit order for multi page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <set field="remainingAmount" value="${groovy: return shoppingCart.getGrandTotal().subtract(shoppingCart.getPaymentTotal());}"/>

        <if-compare operator="greater" value="0.0" field="remainingAmount">
	        <call-simple-method method-name="checkPaymentMethodType" />
	        <if-compare operator="equals" value="false" field="failedProcessPayment" >
	            <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	                <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	            </if-compare>
	        <else>
	            <return response-code="paymentError"/>
	        </else>
	        </if-compare>
	        <!-- call-simple-method method-name="setOrderAdditionalEmails"/ -->
	        <check-errors/>

	        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	            <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
	            <call-simple-method method-name="createCreditCardPayment"/>
	            <return response-code="creditCard"/>
	        <else>
	             <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
	                  <call-simple-method method-name="createCashOnDeliveryPayment"/>
	                  <return response-code="cod"/>
	             </if-compare>
	        </else>
	        </if-compare>
        </if-compare>
        <check-errors/>
    </simple-method>
    

    <simple-method method-name="anonSinglePageSubmitOrder" short-description="submit order for anon single page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <set field="remainingAmount" value="${groovy: return shoppingCart.getGrandTotal().subtract(shoppingCart.getPaymentTotal());}"/>

        <session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalBillingAttributeInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        
        <!-- DETERMINE BILLING ADDRESS -->
        <if-not-empty field="parameters.BILLING_USE_SCREEN">
        	<call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        	<else>
        		<if-not-empty field="parameters.PERSONAL_USE_SCREEN">
	        		<!-- If BILLING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
	        		<call-simple-method method-name="validatePersonalInfoBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        		<else>
	        			<!-- Use Shipping Address Divs for Billing -->
	        			<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
	        				<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        				<map-to-map map="shippingAddressContext" to-map="billingAddressContext"/>
	        			</if-not-empty>
	        		</else>
        		</if-not-empty>
        	</else>
        </if-not-empty>     
        
        <!-- If SHIPPING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
       	<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
        	<set field="isSameAsBilling" from-field="parameters.isSameAsBilling"/>
	        <if-compare operator="equals" value="Y" field="isSameAsBilling"> 
	        	<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
	        	<clear-field field="shippingAddressContext.attnName"/>
	        	<else>
	        		<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        	</else>
	        </if-compare>
        	<else>
        		<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
        		<clear-field field="shippingAddressContext.attnName"/>
        	</else>
        </if-not-empty>
        
        <if-compare operator="not-equals" value="true" field="shippingApplies">
            <call-object-method obj-field="shoppingCart" method-name="setShipmentMethodTypeId">
                <string value="NO_SHIPPING" />
            </call-object-method>
            <call-object-method obj-field="shoppingCart" method-name="setCarrierPartyId">
                <string value="_NA_" />
            </call-object-method>
        </if-compare>
        
        <!--  if shipping applies and there is no shipping option selected and no store selected then return error -->
        <if-compare operator="equals" value="true" field="shippingApplies">

            <if-empty field="parameters.shipMethod">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoShippingMethodError"/>
                <string-to-list string="${tempErrorMessage}" message-field="NO_SHIPPING_METHOD" list="error_list"/>
            <else>
                <!--  Validation for store pickup -->
                <if-compare operator="equals" value="NO_SHIPPING@_NA_" field="parameters.shipMethod">
                    <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="checkStoreId">
                        <string value="STORE_LOCATION"/>
                    </call-object-method>
                    <if-empty field="checkStoreId">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoStoreForPickupError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="NO_STORE_PICKUP" list="error_list"/>
                    </if-empty>
                </if-compare>
            </else>
            </if-empty>
        </if-compare>

        <if-compare operator="greater" value="0.0" field="remainingAmount">
	        <call-simple-method method-name="checkPaymentMethodType" />
	        <if-compare operator="equals" value="false" field="failedProcessPayment" >
	            <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	                <set field="parameters.firstNameOnCard" from-field="personContext.firstName"/>
	    <!--        <set field="parameters.middleNameOnCard" from-field="personContext.middleName"/> -->
	                <set field="parameters.lastNameOnCard" from-field="personContext.lastName"/>
	                <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	            </if-compare>
	        <else>
	            <return response-code="paymentError"/>
	        </else>
	        </if-compare>
        </if-compare>

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <!-- <call-simple-method method-name="setOrderAdditionalEmails"/> -->
        
        <check-errors/>
        
        <if-not-empty field="parameters.shipping_instructions">
            <call-object-method method-name="setAllShippingInstructions" obj-field="shoppingCart">
                <field field="parameters.shipping_instructions"/>
            </call-object-method>
        </if-not-empty>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createPartyBillingAddress"/>
        <call-simple-method method-name="createPartyShippingAddress"/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>

        <call-simple-method method-name="createShippingAddressPurpose"/>
        <call-simple-method method-name="setOrderContactMech"/>


        <if-compare operator="greater" value="0.0" field="remainingAmount">
	        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	            <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
	            <call-simple-method method-name="createCreditCardPayment"/>
	            <!-- NOTE: Billing Address purpose BILLING_LOCATION is created in createCreditCard Service -->
	            <return response-code="creditCard"/>
	         <else>
	              <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
	                   <call-simple-method method-name="createCashOnDeliveryPayment"/>
	                   <return response-code="cod"/>
	              </if-compare>
                  <call-simple-method method-name="createBillingAddressPurpose"/>
	         </else>
	        </if-compare>
        </if-compare>

    </simple-method>


    <simple-method method-name="anonMultiPageSubmitOrder" short-description="submit order for anon multi page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <set field="remainingAmount" value="${groovy: return shoppingCart.getGrandTotal().subtract(shoppingCart.getPaymentTotal());}"/>

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>

        <if-compare operator="greater" value="0.0" field="remainingAmount">
	        <!-- Validate Payment Method Type information -->
	        <call-simple-method method-name="checkPaymentMethodType" />
	        <if-compare operator="equals" value="false" field="failedProcessPayment" >
	             <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	            <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        </if-compare>
	        <else>
	            <return response-code="paymentError"/>
	        </else>
	        </if-compare>
        </if-compare>
        <check-errors/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
        <if-compare operator="greater" value="0.0" field="remainingAmount">
	        <!-- <call-simple-method method-name="setOrderAdditionalEmails"/> -->
	        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
	            <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
	            <call-simple-method method-name="createCreditCardPayment"/>
	            <return response-code="creditCard"/>
	         <else>
	              <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
	                   <call-simple-method method-name="createCashOnDeliveryPayment"/>
	                   <return response-code="cod"/>
	              </if-compare>
	         </else>
	        </if-compare>
        </if-compare>
    </simple-method>

<!-- PAYPAL CHECKOUT  -->    
    <simple-method method-name="singlePagePayPalSubmitOrder" short-description="submit order for single page pay pal" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <check-errors/>
    </simple-method>

    <simple-method method-name="multiPagePayPalSubmitOrder" short-description="submit order for multi page pay pal" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <check-errors/>

    </simple-method>

    <simple-method method-name="anonSinglePagePayPalSubmitOrder" short-description="submit order for anon single page pay pal" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <!-- call-simple-method method-name="setOrderAdditionalEmails"/ > -->
        <check-errors/>

        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="anonMultiPagePayPalSubmitOrder" short-description="submit order for anon multi page pay pal" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <!-- call-simple-method method-name="setOrderAdditionalEmails"/>  -->
        <check-errors/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>

        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="anonSinglePageSetPayPalCheckout" short-description="validate and store customer information before redirect to pay pal for anon single page" login-required="false">

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
		<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <session-to-field field="shoppingCart"/>

        <!-- store the customer information -->
        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createPartyBillingAddress"/>
        <call-simple-method method-name="createBillingAddressPurpose"/>
        <call-simple-method method-name="createPartyShippingAddress"/>
        <call-simple-method method-name="createShippingAddressPurpose"/>
        <call-simple-method method-name="setOrderContactMech"/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="anonMultiPageSetPayPalCheckout" short-description="make user account if value is entered before redirect to pay pal for anon multi page" login-required="false">

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="singlePageSetPayPalCheckout" short-description="validate and store customer information before redirect to pay pal for single page" login-required="false">

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <check-errors/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createOrderContactMech"/>
    </simple-method>

<!-- EBS CHECKOUT   -->    
    <simple-method method-name="singlePageEBSCheckout" short-description="validate and store customer information before redirect to EBS for single page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <check-errors/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createOrderContactMech"/>
    </simple-method>

    <simple-method method-name="multiPageEBSCheckout" short-description="make user account if value is entered before redirect to EBS for anon multi page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <check-errors/>
    </simple-method>

    <simple-method method-name="anonSinglePageEBSCheckout" short-description="validate and store customer information before redirect to EBS for anon single page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <session-to-field field="shoppingCart"/>

        <!-- store the customer information -->
        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createPartyBillingAddress"/>
        <call-simple-method method-name="createBillingAddressPurpose"/>
        <call-simple-method method-name="createPartyShippingAddress"/>
        <call-simple-method method-name="createShippingAddressPurpose"/>
        <call-simple-method method-name="setOrderContactMech"/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>
    
    <simple-method method-name="anonMultiPageEBSCheckout" short-description="make user account if value is entered before redirect to EBS for anon multi page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>
    
<!-- PAYNETZ CHECKOUT   -->    
    
    <simple-method method-name="singlePagePayNetzCheckout" short-description="validate and store customer information before redirect to PayNetz for single page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <check-errors/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createOrderContactMech"/>
    </simple-method>
    
    <simple-method method-name="multiPagePayNetzCheckout" short-description="make user account if value is entered before redirect to PayNetz for anon multi page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />
        <check-errors/>
    </simple-method>

    
    <simple-method method-name="anonSinglePagePayNetzCheckout" short-description="validate and store customer information before redirect to PayNetz for anon single page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <session-to-field field="shoppingCart"/>

        <!-- store the customer information -->
        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createPartyBillingAddress"/>
        <call-simple-method method-name="createBillingAddressPurpose"/>
        <call-simple-method method-name="createPartyShippingAddress"/>
        <call-simple-method method-name="createShippingAddressPurpose"/>
        <call-simple-method method-name="setOrderContactMech"/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>


    <simple-method method-name="anonMultiPagePayNetzCheckout" short-description="make user account if value is entered before redirect to PayNetz for anon multi page" login-required="false">

        <call-simple-method method-name="validateAppliedGiftCardPayment" />

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    
    
<!-- CHECKOUT METHODS   -->    

<!-- PARTY   -->    

    <simple-method method-name="setAnonUserLogin" short-description="Set user login in the session" login-required="false">
        <set field="partyId" from-field="parameters.partyId"/>
        <if-empty field="userLogin">
            <entity-one entity-name="UserLogin" value-field="userLogin">
                <field-map field-name="userLoginId" value="anonymous"/>
            </entity-one>
            <set field="userLogin.partyId" from-field="partyId"/>
            <set-current-user-login value-field="userLogin"/>
        <else>
            <!-- If an anonymous vistor is coming back, update the party id in the userLogin object -->
            <if-compare field="userLogin.userLoginId" operator="equals" value="anonymous">
                <set field="userLogin.partyId" from-field="partyId"/>
            </if-compare>
        </else>
        </if-empty>
        <field-to-request field="userLogin"/>
        <field-to-session field="userLogin"/>
        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method obj-field="shoppingCart" method-name="setOrderPartyId">
                <field field="userLogin.partyId"/>
            </call-object-method>
             <call-object-method obj-field="shoppingCart" method-name="setUserLogin">
                 <field field="userLogin" type="org.ofbiz.entity.GenericValue"/>
                 <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
             </call-object-method>
         </if-not-empty>
    </simple-method>

    <simple-method method-name="createUpdatePerson" short-description="Create or Update person" login-required="false">
        <if-empty field="parameters.partyId">
            <!-- call the create person service -->
            <set-service-fields service-name="createPerson" to-map="createPersonCtx" map="personContext"/>
            <call-service service-name="createPerson" in-map-name="createPersonCtx">
                <result-to-field result-name="partyId" field="tempMap.partyId"/>
                <result-to-request result-name="partyId"/>
            </call-service>
            <set from-field="tempMap.partyId" field="parameters.partyId"/>
            <call-simple-method method-name="setAnonUserLogin"/>
            <!-- add the party to the customer role -->
            <set field="roleMap.roleTypeId" value="GUEST_CUSTOMER"/>
            <set field="roleMap.partyId" from-field="tempMap.partyId"/>
            <call-service service-name="createPartyRole" in-map-name="roleMap"/>
              

	        <!-- Product Store ID -->
	        <if-empty field="parameters.productStoreId">
	            <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="parameters.productStoreId">
	                <field field="request" type="javax.servlet.ServletRequest"/>
	            </call-class-method>
	        </if-empty>
            <make-value entity-name="ProductStoreRole" value-field="productStoreRole"/>
            <set field="productStoreRole.partyId" from-field="tempMap.partyId"/>
            <set field="productStoreRole.roleTypeId" value="GUEST_CUSTOMER"/>
            <set field="productStoreRole.productStoreId" from-field="parameters.productStoreId"/>
            <now-timestamp field="productStoreRole.fromDate"/>  
            <create-value value-field="productStoreRole"/>
        <else>
            <set from-field="parameters.partyId" field="personContext.partyId"/>
            <set-service-fields service-name="updatePerson" to-map="updatePersonCtx" map="personContext"/>
            <call-service service-name="updatePerson" in-map-name="updatePersonCtx"/>
            <set field="tempMap.partyId" from-field="parameters.partyId"/>
        </else>
        </if-empty>

        <!-- Sets gender and DOB in partyAttribute entity -->
        <call-simple-method method-name="createUpdatePartyAttributes" xml-resource="component://osafe/script/Event/UserProfileEvents.xml"/>

        <set from-field="tempMap.partyId" field="billingAddressContext.partyId"/>
        <set from-field="tempMap.partyId" field="shippingAddressContext.partyId"/>
        <set from-field="tempMap.partyId" field="homePhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="workPhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="mobilePhoneContext.partyId"/>

        <!-- EMAIL  -->
        <if-not-empty field="personContext.emailAddress">
            <set-service-fields service-name="createPartyEmailAddress" to-map="emailContext" map="personContext"/>
            <call-service service-name="createPartyEmailAddress" in-map-name="emailContext">
                <result-to-field result-name="contactMechId" field="emailContext.contactMechId"/>
            </call-service>

            <!-- if purpose not exists create purpose -->
            <set from-field="emailContext.contactMechId" field="emailPurposeContext.contactMechId"/>
            <set from-field="emailContext.partyId" field="emailPurposeContext.partyId"/>
            <set value="PRIMARY_EMAIL" field="emailPurposeContext.contactMechPurposeTypeId"/>
            <entity-and entity-name="PartyContactMechPurpose" list="partyEmailContactMechPurposes">
                <field-map field-name="partyId" from-field="emailPurposeContext.partyId"/>
                <field-map field-name="contactMechId" from-field="emailPurposeContext.contactMechId"/>
                <field-map field-name="contactMechPurposeTypeId" from-field="emailPurposeContext.contactMechPurposeTypeId"/>
            </entity-and>
            <first-from-list list="partyEmailContactMechPurposes" entry="partyEmailContactMechPurpose"/>
            <if-empty field="partyEmailContactMechPurpose">
                <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
            </if-empty>
        </if-not-empty>
        <!-- home phone -->
        <if>
           <condition>
              <or>
                <not><if-empty field="contactHomePhoneMap.contactHomePhoneContact"></if-empty></not>
                <not><if-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"></if-empty></not>
              </or>
           </condition>
           <then>
               <if-not-empty field="parameters.homePhoneContactMechId">
                   <set field="homePhoneContext.contactMechId" from-field="parameters.homePhoneContactMechId"/>
                   <call-service service-name="updatePartyTelecomNumber" in-map-name="homePhoneContext">
                       <result-to-field result-name="contactMechId" field="homePhoneContext.contactMechId"/>
                   </call-service>
                   <else>
                       <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
                           <result-to-field result-name="contactMechId" field="homePhoneContext.contactMechId"/>
                       </call-service>
                       <set from-field="userLogin.partyId" field="homePhonePurposeContext.partyId"/>
                       <set from-field="homePhoneContext.contactMechId" field="homePhonePurposeContext.contactMechId"/>
       
                       <set value="PHONE_HOME" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                       <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
                       <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                       <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
                   </else>
               </if-not-empty>
          </then>
       </if>  
            
        <!-- work phone -->
        <if-not-empty field="parameters.workPhoneContactMechId">
            <set field="workPhoneContext.contactMechId" from-field="parameters.workPhoneContactMechId"/>
            <if-not-empty field="workPhoneContext.contactNumber">
                <call-service service-name="updatePartyTelecomNumber" in-map-name="workPhoneContext">
                    <result-to-field result-name="contactMechId" field="workPhoneContext.contactMechId"/>
                </call-service>
            <else>
                <call-service service-name="deletePartyContactMech" in-map-name="workPhoneContext"/>
            </else>
            </if-not-empty>
            <else>
                <if-not-empty field="workPhoneContext.contactNumber">
                    <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                        <result-to-field result-name="contactMechId" field="workPhoneContext.contactMechId"/>
                    </call-service>
                    <set from-field="userLogin.partyId" field="homePhonePurposeContext.partyId"/>
                    <set from-field="workPhoneContext.contactMechId" field="workPhonePurposeContext.contactMechId"/>

                    <set value="PHONE_WORK" field="workPhonePurposeContext.contactMechPurposeTypeId"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
                </if-not-empty>
            </else>
        </if-not-empty>

        <!-- mobile phone -->        
        <if-not-empty field="parameters.mobilePhoneContactMechId">
            <set field="mobilePhoneContext.contactMechId" from-field="parameters.mobilePhoneContactMechId"/>
            <if-not-empty field="mobilePhoneContext.contactNumber">
                <call-service service-name="updatePartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhoneContext.contactMechId"/>
                </call-service>
            <else>
                <call-service service-name="deletePartyContactMech" in-map-name="mobilePhoneContext"/>
            </else>
            </if-not-empty>
        <else>
            <if-not-empty field="mobilePhoneContext.contactNumber">
                <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhoneContext.contactMechId"/>
                </call-service>
                <set from-field="userLogin.partyId" field="mobilePhonePurposeContext.partyId"/>
                <set from-field="mobilePhoneContext.contactMechId" field="mobilePhonePurposeContext.contactMechId"/>
                <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
            </if-not-empty>
        </else>
        </if-not-empty>
    </simple-method>

    
    <simple-method method-name="createUserLogin" short-description="Create  a user login" login-required="false">

        <!-- create login -->
        <if-not-empty field="userLoginContext.currentPassword">
            <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
            <set-service-fields service-name="createUserLogin" to-map="createUserLoginCtx" map="userLoginContext"/>
            <call-service service-name="createUserLogin" in-map-name="createUserLoginCtx"/>
            <entity-one entity-name="UserLogin" value-field="createdUserLogin">
                <field-map field-name="userLoginId" from-field="userLoginContext.userLoginId"/>
            </entity-one>
            <field-to-request field="createdUserLogin" request-name="createdUserLogin"/>
            <field-to-session field="createdUserLogin" session-name="NEW_USER_LOGIN"/>
            
            <!-- Get Company (Pay To Party) email address -->
	        <entity-one entity-name="ProductStore" value-field="productStore"/>
	        <if-not-empty field="productStore">
	        	<set field="getPartyEmailMap.partyId" from-field="productStore.payToPartyId"/>
	        </if-not-empty>
	        <entity-one entity-name="UserLogin" value-field="systemUserLogin" auto-field-map="false">
	            <field-map field-name="userLoginId" value="system"/>
	        </entity-one>
	        <set field="getPartyEmailMap.userLogin" from-field="systemUserLogin"/>
	        <call-service service-name="getPartyEmail" in-map-name="getPartyEmailMap">
	            <result-to-field result-name="emailAddress" field="emailAddressCompany"/>
	        </call-service>
	        <set field="registrationEventContext.emailAddressCompany" from-field="emailAddressCompany"/>
	        
            <!-- Create Communication Event-->
            <map-to-map map="registrationEventContext" to-map="parameters"/>
	        <set-service-fields service-name="createCommunicationEventWithoutPermission" map="parameters" to-map="createComEventMap"/>
	        <set field="createComEventMap.communicationEventTypeId" value="EMAIL_COMMUNICATION"/>
	        <set field="createComEventMap.userLogin" from-field="systemUserLogin"/>
	        <set field="createComEventMap.partyIdTo" from-field="createdUserLogin.partyId"/>
	        <set field="createComEventMap.contactMechTypeId" value="EMAIL_ADDRESS"/>
	        <set field="createComEventMap.contactMechIdTo" from-field="emailContext.contactMechId"/>
	        <set field="createComEventMap.roleTypeIdTo" value="GUEST_CUSTOMER"/>
	        <set field="createComEventMap.reasonEnumId" value="PRDS_CUST_REGISTER"/>
			<set field="createComEventMap.fromString" from-field="emailAddressCompany"/>
	        <if-not-empty field="emailContext.emailAddress">
	           <set field="createComEventMap.toString" from-field="emailContext.emailAddress"/>
	        </if-not-empty>
	        <set field="createComEventMap.subject" value="Customer Registration"/>
	        <call-service service-name="createCommunicationEventWithoutPermission" in-map-name="createComEventMap"/>
	        
            <!-- send registration mail -->
            <call-simple-method method-name="sendRegistrationEmail" xml-resource="component://osafe/script/Event/EmailEvents.xml"/>
            
            <call-bsh>
                <![CDATA[
                    org.ofbiz.webapp.control.LoginWorker.doBasicLogin(createdUserLogin, request);
                    org.ofbiz.webapp.control.LoginWorker.autoLoginSet(request, response);
                ]]>
            </call-bsh>
	        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
	        <if-not-empty field="shoppingCart">
	            <call-object-method obj-field="shoppingCart" method-name="setOrderPartyId">
	                <field field="createdUserLogin.partyId"/>
	            </call-object-method>
	             <call-object-method obj-field="shoppingCart" method-name="setUserLogin">
	                 <field field="createdUserLogin" type="org.ofbiz.entity.GenericValue"/>
	                 <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
	             </call-object-method>
	        </if-not-empty>
	        
            <field-to-session field="userLoginContext.userLoginId" session-name="USER_LOGIN_EMAIL"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createOrderContactMech" short-description="Create billing and shipping for order" login-required="false">

        <call-simple-method method-name="createBillingAddress"/>

        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-not-empty field="shoppingCart">

            <!-- UPDATE SHIPPING Address based on values entered during checkout (shippingAddressContext)-->
            <call-object-method obj-field="shoppingCart" method-name="getShippingContactMechId" ret-field="shippingContactMechId"/>
            <make-value entity-name="PostalAddress" value-field="postalAddress"/>
            <set field="postalAddress.contactMechId" from-field="shippingContactMechId"/>
            <find-by-primary-key map="postalAddress" value-field="lookedUpValue"/>
            <set-nonpk-fields map="shippingAddressContext" value-field="lookedUpValue"/>
            <store-value value-field="lookedUpValue"/>
            <set field="shippingAddressPurposeContext.contactMechId" from-field="shippingContactMechId"/>
            
        </if-not-empty>
        <call-simple-method method-name="setOrderContactMech"/>

    </simple-method>
    
    <simple-method method-name="setOrderContactMech" short-description="Set Contact Mech to the Shopping Cart" login-required="false">

        <!-- SET ADDRESS TO CART -->
        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-not-empty field="shoppingCart">
          <!-- SET BILLING ADDRESS TO CART -->
	          <if-not-empty field="billAddressPurposeContext.contactMechId">
	            <call-object-method obj-field="shoppingCart" method-name="addContactMech">
	                <string value="BILLING_LOCATION"/>
	                <field field="billAddressPurposeContext.contactMechId"/>
	            </call-object-method>
	          </if-not-empty>
          <!-- SET SHIPPING ADDRESS TO CART -->
	          <if-not-empty field="shippingAddressPurposeContext.contactMechId">
		        <call-object-method obj-field="shoppingCart" method-name="setShippingContactMechId">
		            <field field="shippingAddressPurposeContext.contactMechId"/>
		        </call-object-method>
		      </if-not-empty>
	      <!-- SET EMAIL ADDRESS TO CART -->
		      <if-not-empty field="emailContext.contactMechId">
		        <call-object-method obj-field="shoppingCart" method-name="addContactMech">
		                <string value="ORDER_EMAIL"/>
		                <field field="emailContext.contactMechId"/>
		        </call-object-method>
		      </if-not-empty>
        </if-not-empty>
   
    </simple-method>    
    
<!-- ADDRESS METHODS   -->    

    <simple-method method-name="createBillingAddress" short-description="Create Billing Address " login-required="false">
        <!-- CREATE BILLING ADDRESS-->
        <set-service-fields service-name="createPostalAddress" to-map="billAddressContext" map="billingAddressContext"/>
        <call-service service-name="createPostalAddress" in-map-name="billAddressContext">
            <result-to-field result-name="contactMechId" field="billAddressPurposeContext.contactMechId"/>
        </call-service>
    </simple-method>

    <simple-method method-name="createPartyBillingAddress" short-description="Create Party Billing Address" login-required="false">
       <!-- CREATE BILLING ADDRESS -->
       <set-service-fields service-name="createPartyPostalAddress" to-map="createPartyPostalAddressCtx" map="billingAddressContext"/>
       <call-service service-name="createPartyPostalAddress" in-map-name="createPartyPostalAddressCtx">
           <result-to-field result-name="contactMechId" field="billAddressPurposeContext.contactMechId"/>
       </call-service>
    </simple-method>    

    <simple-method method-name="createBillingAddressPurpose" short-description="Create Billing Address Purpose" login-required="false">
       <!-- CREATE BILLING PURPOSE -->
           <set value="BILLING_LOCATION" field="billAddressPurposeContext.contactMechPurposeTypeId"/>
           <call-service service-name="createPartyContactMechPurpose" in-map-name="billAddressPurposeContext"/>
    </simple-method>    

    <simple-method method-name="createShippingAddress" short-description="Create Shipping Address " login-required="false">
       <!-- CREATE SHIPPING ADDRESS -->
        <set-service-fields service-name="createPostalAddress" to-map="createShipAddressCtx" map="shippingAddressContext"/>
        <call-service service-name="createPostalAddress" in-map-name="createShipAddressCtx">
            <result-to-field result-name="contactMechId" field="shippingAddressPurposeContext.contactMechId"/>
        </call-service>
    </simple-method>

    <simple-method method-name="createPartyShippingAddress" short-description="Create Shipping Address" login-required="false">
       <!-- CREATE SHIPPING ADDRESS -->
       <set-service-fields service-name="createPartyPostalAddress" to-map="createPartyPostalAddressCtx" map="shippingAddressContext"/>
       <call-service service-name="createPartyPostalAddress" in-map-name="shippingAddressContext">
           <result-to-field result-name="contactMechId" field="shippingAddressPurposeContext.contactMechId"/>
       </call-service>
    </simple-method>    

    <simple-method method-name="createShippingAddressPurpose" short-description="Create shipping Address Purpose" login-required="false">
       <!-- CREATE SHIPPING PURPOSE -->
          <set value="SHIPPING_LOCATION" field="shippingAddressPurposeContext.contactMechPurposeTypeId"/>
          <call-service service-name="createPartyContactMechPurpose" in-map-name="shippingAddressPurposeContext"/>
    </simple-method>    


    <simple-method method-name="multiPageUpdateCustomerAddress" short-description="make billing and shipping address for order" login-required="false">

        <session-to-field field="shoppingCart"/>
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalBillingAttributeInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        
        <!-- DETERMINE BILLING ADDRESS -->
        <if-not-empty field="parameters.BILLING_USE_SCREEN">
        	<call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        	<else>
        		<if-not-empty field="parameters.PERSONAL_USE_SCREEN">
	        		<!-- If BILLING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
	        		<call-simple-method method-name="validatePersonalInfoBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        		<else>
	        			<!-- Use Shipping Address Divs for Billing -->
	        			<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
	        				<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        				<map-to-map map="shippingAddressContext" to-map="billingAddressContext"/>
	        			</if-not-empty>
	        		</else>
        		</if-not-empty>
        	</else>
        </if-not-empty>
        
       	<!-- If SHIPPING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
       	<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
        	<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        	<else>
        		<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
        		<clear-field field="shippingAddressContext.attnName"/>
        	</else>
        </if-not-empty>
        <check-errors/>
        
        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createBillingAddress"/>
        <call-simple-method method-name="createShippingAddress"/>
        <call-simple-method method-name="resetMultiShipGroups"/>
        <call-simple-method method-name="setOrderContactMech"/>

        <!-- Ofbiz by default will redirect checkout flow to Shipping Options screen if no shipping applies, so we need to set the next screen when no shipping applies. -->
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        <if-compare operator="equals" value="false" field="shippingApplies">
            <return response-code="payment"/>
        </if-compare>

    </simple-method>

    <simple-method method-name="annonMultiPageCreateCustomer" short-description="make personal, billing and shipping address for Anon User mutli Page Checkout" login-required="false">
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalBillingAttributeInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        
        <!-- DETERMINE BILLING ADDRESS -->
        <if-not-empty field="parameters.BILLING_USE_SCREEN">
        	<call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        	<else>
        		<if-not-empty field="parameters.PERSONAL_USE_SCREEN">
	        		<!-- If BILLING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
	        		<call-simple-method method-name="validatePersonalInfoBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        		<else>
	        			<!-- Use Shipping Address Divs for Billing -->
	        			<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
	        				<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        				<map-to-map map="shippingAddressContext" to-map="billingAddressContext"/>
	        			</if-not-empty>
	        		</else>
        		</if-not-empty>
        	</else>
        </if-not-empty>
                
        <!-- If SHIPPING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
       	<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
        	<set field="isSameAsBilling" from-field="parameters.isSameAsBilling"/>
	        <if-compare operator="equals" value="Y" field="isSameAsBilling"> 
	        	<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
	        	<clear-field field="shippingAddressContext.attnName"/>
	        	<else>
	        		<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        	</else>
	        </if-compare>
        	<else>
        		<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
        		<clear-field field="shippingAddressContext.attnName"/>
        	</else>
        </if-not-empty>
        <check-errors/>

        <session-to-field field="shoppingCart"/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createPartyBillingAddress"/>
        <call-simple-method method-name="createBillingAddressPurpose"/>
        <call-simple-method method-name="createPartyShippingAddress"/>
        <call-simple-method method-name="createShippingAddressPurpose"/>
        <call-simple-method method-name="resetMultiShipGroups"/>
        <call-simple-method method-name="setOrderContactMech"/>
        
        <session-to-field field="shoppingCart"/>

        <!-- Ofbiz by default will redirect checkout flow to Shipping Options screen if no shipping applies, so we need to set the next screen when no shipping applies. -->
        <session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        <if-compare operator="equals" value="false" field="shippingApplies">
            <return response-code="payment"/>
        </if-compare>
        
    </simple-method>





<!-- PAYMENT METHODS   -->    

    <simple-method method-name="createCreditCardPayment" short-description="Create credit card payment" login-required="false">

        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <call-object-method method-name="getContactMech" obj-field="shoppingCart" ret-field="contactMechId">
            <string value="BILLING_LOCATION"/>
        </call-object-method>
        <set field="creditCardContext.contactMechId" from-field="contactMechId"/>
        <call-service service-name="createCreditCard" in-map-name="creditCardContext">
            <default-message>Credit Card successfully created.</default-message>
            <result-to-request result-name="paymentMethodId"/>
            <result-to-field result-name="paymentMethodId" field="paymentMethodId"/>
        </call-service>
        <!-- Set Payment Method-->
         <if-not-empty field="paymentMethodId">
             <session-to-field field="shoppingCart" session-name="shoppingCart"/>
            <if-not-empty field="parameters.savedVerificationNo">
                  <set field="cardSecurityCode" from-field="parameters.savedVerificationNo" set-if-null="true" set-if-empty="true"/>
            </if-not-empty>             
             <if-not-empty field="parameters.verificationNo">
                 <set field="cardSecurityCode" from-field="parameters.verificationNo" set-if-null="true" set-if-empty="true"/>
             </if-not-empty>             
             <create-object class-name="org.ofbiz.order.shoppingcart.CheckOutHelper" field="checkOutHelper">
                 <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
                 <field field="delegator" type="org.ofbiz.entity.Delegator"/>
                 <field field="shoppingCart" type="org.ofbiz.order.shoppingcart.ShoppingCart"/>
             </create-object>
             <call-object-method method-name="getGrandTotal" obj-field="shoppingCart" ret-field="cartGrandTotal"/>
             <call-object-method method-name="getPaymentTotal" obj-field="shoppingCart" ret-field="cartPaymentTotal"/>
             <log level="info" message="######### shoppingCart getGrandTotal() : ${cartGrandTotal}"/>
             <log level="info" message="######### shoppingCart getPaymentTotal() : ${cartPaymentTotal}"/>
             <set field="callResult" value="${groovy:checkOutHelper.finalizeOrderEntryPayment(paymentMethodId, shoppingCart.getGrandTotal().subtract(shoppingCart.getPaymentTotal()), false, true)}"/>
             <set field="cartPaymentInfo" value="${groovy: org.ofbiz.order.shoppingcart.ShoppingCart.CartPaymentInfo cpi = shoppingCart.getPaymentInfo(paymentMethodId, null, null, null, true); cpi.securityCode = cardSecurityCode; return cpi;}"/>
         </if-not-empty>
    </simple-method>

    <simple-method method-name="createCashOnDeliveryPayment" short-description="Create Cash On Delivery payment" login-required="false">
       <session-to-field field="shoppingCart"/>
       <call-bsh>
        <![CDATA[
            shoppingCart.addPaymentAmount("EXT_COD", shoppingCart.getGrandTotal().subtract(shoppingCart.getPaymentTotal()), false);
        ]]>
       </call-bsh>
    </simple-method>

    <simple-method method-name="processPayPalContactMech" short-description="remove contact mech from shopping cart" login-required="false">
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
<!--             <call-object-method method-name="removeContactMech" obj-field="shoppingCart" ret-field="storeId"> -->
<!--                 <string value="BILLING_LOCATION"/> -->
<!--             </call-object-method> -->
            <call-object-method method-name="removeContactMech" obj-field="shoppingCart" ret-field="storeId">
                <string value="ORDER_EMAIL"/>
            </call-object-method>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="addGiftCardNumber" short-description="add Gift Card Number" login-required="false">


        <session-to-field field="shoppingCart"/>
        <!-- Check that a "Gift Card Number" has been entered -->
        <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="giftCardMethod">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <string value="CHECKOUT_GIFTCARD_METHOD"/>
        </call-class-method>
        <if-empty field="giftCardMethod">
            <set field="giftCardMethod" value="NONE"/>
        </if-empty>
        <call-object-method method-name="toUpperCase" obj-field="giftCardMethod" ret-field="giftCardMethodUpperCase"/>
        <if-empty field="parameters.gcNumber">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GiftCardNumberMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
        <!-- validate Duplicate Gift Card -->
        <else>
            <call-object-method obj-field="shoppingCart" method-name="getGiftCards" ret-field="giftCardPayments"/>
            <iterate entry="giftCardPayment" list="giftCardPayments">
                <if-compare-field operator="equals" field="parameters.gcNumber" to-field="giftCardPayment.cardNumber">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="DuplicateGiftCardNumberError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
                </if-compare-field>
            </iterate>
        </else>
        </if-empty>
        <check-errors/>

        <!-- Product Store ID -->
        <if-empty field="parameters.productStoreId">
            <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="parameters.productStoreId">
                <field field="request" type="javax.servlet.ServletRequest"/>
            </call-class-method>
        </if-empty>

        <session-to-field field="userLogin"/>
        <entity-one entity-name="UserLogin" value-field="anonymousUserLogin" auto-field-map="false">
            <field-map field-name="userLoginId" value="anonymous"/>
        </entity-one>
        <set field="anonymousUserLogin.partyId" value="_NA_"/>

        <!-- Validate the Card number and balance-->
        <if>
            <condition>
                <if-compare operator="equals" value="TEST" field="giftCardMethodUpperCase"/>
            </condition>
            <then>
                <call-class-method class-name="com.osafe.util.Util" method-name="isNumber" ret-field="isNumber">
	                <field field="parameters.gcNumber" type="String"/>
	            </call-class-method>
	            <if-compare field="isNumber" operator="equals" value="false">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GiftCartTestNumberInvalidError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
	            </if-compare>
            </then>
        <else-if>
            <condition>
                <if-compare operator="equals" value="TENDERCARD" field="giftCardMethodUpperCase"/>
            </condition>
            <then>
                <set field="balanceInquireCtx.productStoreId" from-field="parameters.productStoreId"/>
                <set field="balanceInquireCtx.cardNumber" from-field="parameters.gcNumber"/>
                <call-service service-name="balanceInquireTenderCard" in-map-name="balanceInquireCtx" break-on-error="false">
                    <result-to-field result-name="balance" field="giftCardBalance"/>
                    <result-to-field result-name="responseCode" field="responseCode"/>
                    <result-to-field result-name="processResult" field="processResult"/>
                </call-service>
                <!-- Check Gift Card Existence-->
                <if-compare operator="not-equals" field="processResult" value="true">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GiftCardInvalidError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
                <else>
                    <!-- Check Gift Card Balance-->
                    <if-compare operator="less-equals" value="0.0" field="giftCardBalance" type="BigDecimal">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GiftCardZeroBalanceError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
                    </if-compare>
                </else>
                </if-compare>
            </then>
        </else-if>
        </if>

        <set field="fieldLevelErrors" value="Y"/>
        <field-to-request field="fieldLevelErrors" />
        <check-errors/>

        <!-- Remove all existing gift card payment if CHECKOUT_GIFTCARD_ONE_ONLY is true-->
        <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="useOnlyOneGiftCard">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <string value="CHECKOUT_GIFTCARD_ONE_ONLY "/>
        </call-class-method>
        <call-class-method class-name="com.osafe.util.Util" method-name="isProductStoreParmTrue" ret-field="isTrue">
            <field field="useOnlyOneGiftCard"/>
        </call-class-method>
        <if-compare field="isTrue" operator="equals" value="true">
            <call-object-method obj-field="shoppingCart" method-name="getGiftCards" ret-field="giftCardPayments"/>
            <iterate entry="giftCardPayment" list="giftCardPayments">
	            <call-object-method obj-field="shoppingCart" method-name="clearPayment">
	                <field field="giftCardPayment.paymentMethodId"/>
	            </call-object-method>
            </iterate>
        </if-compare>

        <!-- Now create the gift card payment-->
        <if>
	        <condition>
	            <if-compare operator="equals" value="TEST" field="giftCardMethodUpperCase"/>
	        </condition>
	        <then>
                <set field="giftCardBalance" from-field="parameters.gcNumber" type="BigDecimal"/>
                <call-object-method method-name="getGrandTotal" obj-field="shoppingCart" ret-field="cartGrandTotal" />
                <call-object-method method-name="getPaymentTotal" obj-field="shoppingCart" ret-field="cartPaymentTotal"/>
                <calculate field="remainingCartAmount">
                    <calcop operator="subtract">
                        <calcop operator="get" field="cartGrandTotal"/>
                        <calcop operator="get" field="cartPaymentTotal"/>
                    </calcop>
                </calculate>
                <calculate field="remainingGiftCardAmount">
                    <calcop operator="subtract">
                        <calcop operator="get" field="giftCardBalance"/>
                        <calcop operator="get" field="remainingCartAmount"/>
                    </calcop>
                </calculate>
                <if-compare operator="greater-equals" value="0.0" field="remainingGiftCardAmount" type="BigDecimal">
                    <set field="appliedGiftCardAmount" from-field="remainingCartAmount"/>
                <else>
                    <set field="appliedGiftCardAmount" from-field="giftCardBalance"/>
                </else>
                </if-compare>
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="GIFT_CARD_NUMBER"/>
                    <field field="parameters.gcNumber" type="String"/>
                </call-object-method>
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="GIFT_CARD_REMAINING_BAL"/>
                    <string value="${remainingGiftCardAmount}"/>
                </call-object-method>
	            <set field="giftCardAmount" from-field="appliedGiftCardAmount" type="BigDecimal"/>
	            <set field="giftCardContext.cardNumber" from-field="parameters.gcNumber" default-value="TESTGIFTCARD"/>
	            <set field="giftCardContext.description" from-field="giftCardMethodUpperCase"/>
	            <now-timestamp field="nowTimestamp"/>
	            <set field ="nextMonth" value="${groovy: org.ofbiz.base.util.UtilDateTime.adjustTimestamp(nowTimestamp,2,1)}" type="Timestamp"/>
	            <set field ="nextMonthString" value="${groovy:org.ofbiz.base.util.UtilDateTime.toDateString(nextMonth)}"/>
	            <set field="giftCardContext.expireDate" from-field="nextMonthString"/>
	            <if-empty field="userLogin">
                    <set field="giftCardContext.userLogin" from-field="anonymousUserLogin"/>
	            </if-empty>
	            <call-service service-name="createGiftCard" in-map-name="giftCardContext">
	                <result-to-request result-name="paymentMethodId"/>
	                <result-to-field result-name="paymentMethodId" field="paymentMethodId"/>
	            </call-service>
	            <!-- Set Payment Method-->
	             <if-not-empty field="paymentMethodId">
	                 <create-object class-name="org.ofbiz.order.shoppingcart.CheckOutHelper" field="checkOutHelper">
	                     <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
	                     <field field="delegator" type="org.ofbiz.entity.Delegator"/>
	                     <field field="shoppingCart" type="org.ofbiz.order.shoppingcart.ShoppingCart"/>
	                 </create-object>
	                 <set field="callResult" value="${groovy:checkOutHelper.finalizeOrderEntryPayment(paymentMethodId, giftCardAmount, false, true)}"/>
	             </if-not-empty>
	        </then>
        <else-if>
	        <condition>
                <if-compare operator="equals" value="TENDERCARD" field="giftCardMethodUpperCase"/>
	        </condition>
	        <then>
	            <call-object-method method-name="getGrandTotal" obj-field="shoppingCart" ret-field="cartGrandTotal" />
                <call-object-method method-name="getPaymentTotal" obj-field="shoppingCart" ret-field="cartPaymentTotal"/>
                <calculate field="remainingCartAmount">
                    <calcop operator="subtract">
                        <calcop operator="get" field="cartGrandTotal"/>
                        <calcop operator="get" field="cartPaymentTotal"/>
                    </calcop>
                </calculate>
                <calculate field="remainingGiftCardAmount">
                    <calcop operator="subtract">
                        <calcop operator="get" field="giftCardBalance"/>
                        <calcop operator="get" field="remainingCartAmount"/>
                    </calcop>
                </calculate>
                <if-compare operator="greater-equals" value="0.0" field="remainingGiftCardAmount" type="BigDecimal">
                    <set field="appliedGiftCardAmount" from-field="remainingCartAmount"/>
                <else>
                    <set field="appliedGiftCardAmount" from-field="giftCardBalance"/>
                </else>
                </if-compare>
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="GIFT_CARD_NUMBER"/>
                    <field field="parameters.gcNumber" type="String"/>
                </call-object-method>
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="GIFT_CARD_REMAINING_BAL"/>
                    <string value="${remainingGiftCardAmount}"/>
                </call-object-method>

                <set field="giftCardContext.cardNumber" from-field="parameters.gcNumber"/>
                <set field="giftCardContext.description" from-field="giftCardMethodUpperCase"/>
                <if-empty field="userLogin">
                    <set field="giftCardContext.userLogin" from-field="anonymousUserLogin"/>
                </if-empty>
                <call-service service-name="createGiftCard" in-map-name="giftCardContext">
                    <result-to-request result-name="paymentMethodId"/>
                    <result-to-field result-name="paymentMethodId" field="paymentMethodId"/>
                </call-service>
                <!--  Set Payment Method -->
                 <if-not-empty field="paymentMethodId">
                     <create-object class-name="org.ofbiz.order.shoppingcart.CheckOutHelper" field="checkOutHelper">
                         <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
                         <field field="delegator" type="org.ofbiz.entity.Delegator"/>
                         <field field="shoppingCart" type="org.ofbiz.order.shoppingcart.ShoppingCart"/>
                     </create-object>
                     <set field="callResult" value="${groovy:checkOutHelper.finalizeOrderEntryPayment(paymentMethodId, appliedGiftCardAmount, false, true)}"/>
                 </if-not-empty>
	        </then>
        </else-if>
        </if>
    </simple-method>

    <simple-method method-name="validateAppliedGiftCardPayment" short-description="validate Applied Gift Card Payment" login-required="false">

        <session-to-field field="shoppingCart"/>

        <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="giftCardMethod">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <string value="CHECKOUT_GIFTCARD_METHOD"/>
        </call-class-method>
        <if-empty field="giftCardMethod">
            <set field="giftCardMethod" value="NONE"/>
        </if-empty>
        <call-object-method method-name="toUpperCase" obj-field="giftCardMethod" ret-field="giftCardMethodUpperCase"/>

        <!-- Product Store ID -->
        <if-empty field="parameters.productStoreId">
            <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="parameters.productStoreId">
                <field field="request" type="javax.servlet.ServletRequest"/>
            </call-class-method>
        </if-empty>

        <!-- Check The Gift Card Still hold the sufficient balance-->
        <if>
            <condition>
                <if-compare operator="equals" value="TEST" field="giftCardMethodUpperCase"/>
            </condition>
            <then>
                <!-- No validation Required-->
            </then>
        <else-if>
            <condition>
                <if-compare operator="equals" value="TENDERCARD" field="giftCardMethodUpperCase"/>
            </condition>
            <then>
		        <call-object-method obj-field="shoppingCart" method-name="getGiftCards" ret-field="giftCardPayments"/>
		        <if-not-empty field="giftCardPayments">
		            <iterate entry="giftCardPayment" list="giftCardPayments">
		                <call-object-method obj-field="shoppingCart" method-name="getPaymentAmount" ret-field="paymentAmount">
		                    <field field="giftCardPayment.paymentMethodId"/>
		                </call-object-method>
		                <set field="balanceInquireCtx.productStoreId" from-field="parameters.productStoreId"/>
		                <set field="balanceInquireCtx.cardNumber" from-field="giftCardPayment.cardNumber"/>
		                <call-service service-name="balanceInquireTenderCard" in-map-name="balanceInquireCtx" break-on-error="false">
		                    <result-to-field result-name="balance" field="giftCardBalance"/>
		                    <result-to-field result-name="responseCode" field="responseCode"/>
		                    <result-to-field result-name="processResult" field="processResult"/>
		                </call-service>
		                <!-- Check Gift Card Existence-->
		                <if-compare operator="not-equals" field="processResult" value="true">
		                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GiftCardInvalidError"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
		                <else>
		                    <!-- Check Gift Card Balance-->
		                    <if-compare operator="less-equals" value="0.0" field="giftCardBalance" type="BigDecimal">
		                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GiftCardZeroBalanceError"/>
		                        <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
		                    <else>
		                        <!-- Check Gift Card still have valid amount to Redeem-->
		                        <calculate field="amountDifference">
		                            <calcop operator="subtract">
		                                <calcop operator="get" field="giftCardBalance"/>
		                                <calcop operator="get" field="paymentAmount"/>
		                            </calcop>
		                        </calculate>
		                        <if-compare operator="less" value="0.0" field="amountDifference" type="BigDecimal">
		                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GiftCardInSufficientBalanceError"/>
		                            <string-to-list string="${tempErrorMessage}" message-field="giftCardNumber" list="error_list"/>
		                        </if-compare>
		                    </else>
		                    </if-compare>
		                </else>
		                </if-compare>
		            </iterate>
		        </if-not-empty>
            </then>
        </else-if>
        </if>
    </simple-method>

    <simple-method method-name="removeGiftCardNumber" short-description="remove applied Gift Card Number" login-required="false">

        <session-to-field field="shoppingCart"/>
        <call-object-method obj-field="shoppingCart" method-name="clearPayment">
            <field field="parameters.gcPaymentMethodId"/>
        </call-object-method>
        <call-object-method method-name="removeOrderAttribute" obj-field="shoppingCart">
            <string value="GIFT_CARD_NUMBER"/>
        </call-object-method>
        <call-object-method method-name="removeOrderAttribute" obj-field="shoppingCart">
            <string value="GIFT_CARD_REMAINING_BAL"/>
        </call-object-method>
        
        <!-- If this session attribute exists, then remove it -->
        <session-to-field field="showGiftCardAdjustedWarning" default=""/>
        <if-not-empty field="showGiftCardAdjustedWarning">
        	<call-object-method obj-field="session" method-name="removeAttribute">
	            <string value="showGiftCardAdjustedWarning"/>
	        </call-object-method>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="updateCartOnChange" short-description="update cart when cart is modified" login-required="false">
    	<clear-field field="parameters.gcNumber"/>
    	
    	<session-to-field field="shoppingCart"/>
    	<session-to-field field="DO_CART_PROMO" default="Y"/>
    	<session-to-field field="DO_CART_LOYALTY" default="Y"/>
    	
    	<!-- UPDATE PROMOTIONS -->    	
    	<if-compare operator="not-equals" field="DO_CART_PROMO" value="N">
	    	<call-class-method method-name="doPromotions" class-name="org.ofbiz.order.shoppingcart.product.ProductPromoWorker">
	            <field field="shoppingCart" type="org.ofbiz.order.shoppingcart.ShoppingCart"/>
	            <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
	        </call-class-method>
        </if-compare>
        
        <!-- UPDATE LOYALTY POINTS -->
        <if-compare operator="not-equals" field="DO_CART_LOYALTY" value="N">
	        <session-to-field field="orderAdjustmentAttributeList"/>
	        <if-not-empty field="orderAdjustmentAttributeList">
		        <call-class-method class-name="com.osafe.events.ShoppingCartEvents" method-name="modifyLoyaltyPoints" ret-field="modifyLoyaltyPointsResult">
		            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
		            <field field="response" type="javax.servlet.http.HttpServletResponse"/>
		        </call-class-method>
	        </if-not-empty>
        </if-compare>
        
        <call-object-method obj-field="shoppingCart" method-name="getShipmentMethodTypeId" ret-field="shipmentMethodTypeId"/>
        <call-object-method obj-field="shoppingCart" method-name="getCarrierPartyId" ret-field="carrierPartyId"/>
        
        <!-- UPDATE TAXES: (Tax the new Total before applying any Payments) -->
        <if-not-empty field="shipmentMethodTypeId">
            <if-not-empty field="carrierPartyId">
                 <set field="chosenShippingMethod" value="${shipmentMethodTypeId}@${carrierPartyId}"/>
            </if-not-empty>
        </if-not-empty>
        
        <if-compare field="chosenShippingMethod" operator="equals" value="NO_SHIPPING@_NA_">
        	<!-- If we are using pickup in Store then we need to use the Store PostalAddress to calculate taxes -->
        	<call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="taxedStoreId">
                <string value="STORE_LOCATION"/>
            </call-object-method>
            <if-not-empty field="taxedStoreId">
            	<entity-one entity-name="Party" value-field="taxedParty" use-cache="true">
		            <field-map field-name="partyId" from-field="taxedStoreId"/>
		        </entity-one>
		        <if-not-empty field="taxedParty">
		        	<set field="findPartyContactMechPurposeMap.partyId" from-field="taxedStoreId"/>
		        	<set field="findPartyContactMechPurposeMap.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
		        	<find-by-and list="partyContactMechPurposeList" map="findPartyContactMechPurposeMap" entity-name="PartyContactMechPurpose"/>
		        	<if-not-empty field="partyContactMechPurposeList">
		        		<call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="filterByDate" ret-field="partyContactMechPurposeList">
                            <field field="partyContactMechPurposeList" type="List"/>
                        </call-class-method>
                        <set field="entityNamePartyContactMech" value="PartyContactMech"/>
                        <call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="getRelatedCache" ret-field="partyContactMechList">
                        	<field field="entityNamePartyContactMech" type="String"/>
                            <field field="partyContactMechPurposeList" type="List"/>
                        </call-class-method>
                        <call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="filterByDate" ret-field="partyContactMechList">
                            <field field="partyContactMechList" type="List"/>
                        </call-class-method>
                        
                        <set value="-fromDate" field="orderByString"/>
                        <field-to-list field="orderByString" list="orderByList"/>
                        <call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="orderBy" ret-field="partyContactMechList">
                            <field field="partyContactMechList" type="java.util.Collection"/>
                            <field field="orderByList" type="List"/>
                        </call-class-method>
                        <if-not-empty field="partyContactMechList">
                        	<first-from-list list="partyContactMechList" entry="partyContactMech"/>
                        </if-not-empty>
                        <!--  this DB call cannot use cache -->
                        <entity-one entity-name="PostalAddress" value-field="storeAddress" use-cache="false">
				            <field-map field-name="contactMechId" from-field="partyContactMech.contactMechId"/>
				        </entity-one>
				        <create-object class-name="org.ofbiz.order.shoppingcart.CheckOutHelper" field="checkOutHelper">
				            <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
				            <field field="delegator" type="org.ofbiz.entity.Delegator"/>
				            <field field="shoppingCart" type="org.ofbiz.order.shoppingcart.ShoppingCart"/>
				        </create-object>
				        <set field="callResult" value="${groovy:checkOutHelper.calcAndAddTax(storeAddress)}"/>
				        <set field="isTaxedOnStore" value="Y"/>
				        <set field="taxedStoreAddress" from-field="storeAddress"/>
				        <field-to-request field="isTaxedOnStore"/>
				        <field-to-request field="taxedStoreAddress"/>
				        
                    </if-not-empty>
		        </if-not-empty>
            </if-not-empty>
            <else>
            	<!-- Calculate tax based on Shipping Address -->
            	<call-class-method method-name="calcTax" class-name="org.ofbiz.order.shoppingcart.CheckOutEvents">
		            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
		            <field field="response" type="javax.servlet.http.HttpServletResponse"/>
		        </call-class-method>
            </else>
        </if-compare>
        
        <!-- Calculate Tax on Loyalty Points -->
        <call-class-method method-name="calcLoyaltyTax" class-name="com.osafe.events.CheckOutEvents">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <field field="response" type="javax.servlet.http.HttpServletResponse"/>
        </call-class-method>
        
        <!-- UPDATE GIFT CARD -->
        <session-to-field field="shoppingCart"/>
		<call-object-method obj-field="shoppingCart" method-name="getGiftCards" ret-field="giftCardNumberPayments"/>
		<call-object-method obj-field="shoppingCart" method-name="getGiftCardPaymentPreferenceTotal" ret-field="gcPaymentPreferenceTotal"/>
		<set field="giftCardPaymentsSize" value="${groovy:if(giftCardNumberPayments != null)return(giftCardNumberPayments.size());}"  type="Integer" default-value="0"/>	        
		
		<if-empty field="parameters.gcPaymentMethodId">
	        <if-compare field="giftCardPaymentsSize" operator="greater" value="0">
		    	<iterate entry="giftCardNumberPayment" list="giftCardNumberPayments">
		    		<set field="parameters.gcPaymentMethodId" from-field="giftCardNumberPayment.paymentMethodId"/>
		    		<call-simple-method method-name="removeGiftCardNumber"/>
		    	</iterate>
		    	
		    	<iterate entry="giftCardNumberPayment" list="giftCardNumberPayments">
		    		<set field="parameters.gcNumber" from-field="giftCardNumberPayment.cardNumber"/>
		    		<call-simple-method method-name="addGiftCardNumber"/>
		    	</iterate>
	    	</if-compare>
	    </if-empty>
	    
	    <call-object-method obj-field="shoppingCart" method-name="getGiftCardPaymentPreferenceTotal" ret-field="gcPaymentPreferenceTotalOnChange"/>
	    <if-compare-field operator="not-equals" field="gcPaymentPreferenceTotal" to-field="gcPaymentPreferenceTotalOnChange" type="BigDecimal">
	    	<set field="showGiftCardAdjustedWarning" value="Y"/>
	    	<field-to-session field="showGiftCardAdjustedWarning"/>
	    	<else>
	    		<call-object-method obj-field="session" method-name="removeAttribute">
		            <string value="showGiftCardAdjustedWarning"/>
		        </call-object-method>
	    	</else>
	    </if-compare-field>
    	<clear-field field="parameters.gcNumber"/>
    	<clear-field field="parameters.gcPaymentMethodId"/>
    	
    	<!-- ClEAN UP -->
        <if-compare field="DO_CART_PROMO" operator="equals" value="N">
	        <call-object-method obj-field="session" method-name="removeAttribute">
	            <string value="DO_CART_PROMO"/>
	        </call-object-method>
        </if-compare>
        <if-compare field="DO_CART_LOYALTY" operator="equals" value="N">
	        <call-object-method obj-field="session" method-name="removeAttribute">
	            <string value="DO_CART_LOYALTY"/>
	        </call-object-method>
        </if-compare>
	    
    </simple-method>

    <simple-method method-name="resetMultiShipGroups" short-description="set all cart ship groups to a single group" login-required="false">

        <call-class-method class-name="com.osafe.events.ShoppingCartEvents" method-name="resetMultiShipGroups" ret-field="result">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
            <field field="response" type="javax.servlet.http.HttpServletResponse"/>
        </call-class-method>


        <session-to-field field="shoppingCart"/>
            <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                  <string value="DELIVERY_OPTION"/>
                  <string value="SHIP_TO"/>
            </call-object-method>
	        <call-object-method obj-field="shoppingCart" method-name="setShipmentMethodTypeId">
	            <field field="shipmentMethodTypeId"/>
	        </call-object-method>
	        <call-object-method obj-field="shoppingCart" method-name="setCarrierPartyId">
	            <field field="carrierPartyId"/>
	        </call-object-method>
    </simple-method>

    <simple-method method-name="checkPaymentMethodType" short-description="sets the paymentMethodTypeId" login-required="false">
        <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="allowCC">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <string value="CHECKOUT_ALLOW_CC"/>
        </call-class-method>
        <set field="failedProcessPayment" value="false" type="Boolean"/>
                     
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="storeId">
                <string value="STORE_LOCATION"/>
            </call-object-method>
            <if-not-empty field="storeId">
                <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="isCCRequired">
                    <field field="request" type="javax.servlet.ServletRequest"/>
                    <string value="CHECKOUT_STORE_CC_REQ"/>
                </call-class-method>
                <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="showCC">
                    <field field="request" type="javax.servlet.ServletRequest"/>
                    <string value="CHECKOUT_STORE_CC"/>
                </call-class-method>
                <if-validate-method class="com.osafe.util.Util" field="showCC" method="isProductStoreParmTrue">
                    <!-- CASE 1 : show = True ,Req =True -->
                    <if-validate-method class="com.osafe.util.Util" field="isCCRequired" method="isProductStoreParmTrue">
                        <set field="parameters.paymentMethodTypeId" value="CREDIT_CARD"/>
                        <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                        <!-- If the use of a credit card is required, check if the CC info input is being displayed -->
                        <if-validate-method class="com.osafe.util.Util" field="allowCC" method="isProductStoreParmTrue">
                        <else>
                            <set field="failedProcessPayment" value="true" type="Boolean"/>
                        </else>
                        </if-validate-method>
                    <!-- CASE 2 : show = True ,Req = False -->
                    <else>
                        <set field="payInStore" from-field="parameters.payInStore"/>
                        <if-compare operator="equals" value="Y" field="payInStore">
                           <set field="parameters.paymentMethodTypeId" value="EXT_COD"/>
                           <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                        <else>
                            <set field="parameters.paymentMethodTypeId" value="CREDIT_CARD"/>
                            <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                        </else>
                        </if-compare>
                    </else>
                    </if-validate-method>
                    <!-- CASE 3 & 4 : show = False  -->
                <else>
                    <set field="parameters.paymentMethodTypeId" value="EXT_COD"/>
                    <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                </else>
                </if-validate-method>
            <else>
                <!-- check if paymentOption was selected -->
                <if-not-empty field="parameters.paymentOption">
                    <if-compare operator="equals" value="PAYOPT_COD" field="parameters.paymentOption">
                        <set field="parameters.paymentMethodTypeId" value="EXT_COD"/>
                        <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                    <else>
                        <set field="parameters.paymentMethodTypeId" value="CREDIT_CARD"/>
                        <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                    </else>
                    </if-compare>
                <else>
                    <set field="failedProcessPayment" value="true" type="Boolean"/>
                </else>
                </if-not-empty>
            </else>
            </if-not-empty>
        </if-not-empty>
    </simple-method>
<!-- PROCESS PAYMENT ERROR METHODS   -->    

    <simple-method method-name="processpaymentFail" short-description="process payment fail" login-required="false">
        <set field="isPaymentProcessError" value="Y"/>
        <field-to-request field="isPaymentProcessError" />
        <request-to-field field="errorMessage" request-name="_ERROR_MESSAGE_"/>
        <property-to-field field="errorMessage" resource="OSafeUiLabels" property="ProcessPaymentError"/>
        <field-to-request field="errorMessage" request-name="_ERROR_MESSAGE_"/>
        <call-simple-method method-name="clearPaymentMethods"/>
    </simple-method>

    <simple-method method-name="processpaymentError" short-description="process payment error" login-required="false">
        <set field="isPaymentProcessError" value="Y"/>
        <field-to-request field="isPaymentProcessError" />
        <request-to-field field="errorMessage" request-name="_ERROR_MESSAGE_"/>
        <property-to-field field="errorMessage" resource="OSafeUiLabels" property="ProcessPaymentError"/>
        <field-to-request field="errorMessage" request-name="_ERROR_MESSAGE_"/>
        <call-simple-method method-name="clearPaymentMethods"/>
    </simple-method>

    <simple-method method-name="clearPaymentMethods" short-description="Remove all payment method from cart except GIFT_CARD" login-required="false">
        <!-- Remove all payment method from cart except GIFT_CARD -->
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method obj-field="shoppingCart" method-name="getPaymentMethodIds" ret-field="cartPaymentMethodIds"/>
            <if-not-empty field="cartPaymentMethodIds">
	            <call-object-method obj-field="shoppingCart" method-name="getGiftCards" ret-field="giftCardPayments"/>
                <if-not-empty field="giftCardPayments">
	                <iterate entry="giftCardPayment" list="giftCardPayments">
	                    <call-object-method method-name="remove" obj-field="cartPaymentMethodIds">
	                        <field field="giftCardPayment.paymentMethodId" type="Object"/>
	                    </call-object-method>
	                </iterate>
                </if-not-empty>
                <call-object-method obj-field="shoppingCart" method-name="clearPaymentMethodsById">
                    <field field="cartPaymentMethodIds" type="List"/>
                </call-object-method>
            </if-not-empty>
            <!--  Set order id as null in cart because order has been rejected -->
            <call-object-method obj-field="shoppingCart" method-name="setOrderId">
                <string value=""/>
            </call-object-method>
        </if-not-empty>
    </simple-method>
    
<!-- SHIPPING METHODS -->    

    <simple-method method-name="multiPageValidateShippingOption" short-description="validate shipping method" login-required="false">
        <session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        
        <if-compare operator="equals" value="true" field="shippingApplies">
            <!-- if only one store is open and Store Pickup is selected, then use this store -->
	        <if-compare operator="equals" value="true" field="shippingApplies">
	        	<if-compare operator="equals" value="NO_SHIPPING@_NA_" field="parameters.shipping_method">
			        <if-not-empty field="parameters.oneStoreOpen">
			        	<if-compare operator="equals" value="Y" field="parameters.oneStoreOpen">
					        <if-not-empty field="parameters.storeId">
					            <session-to-field field="shoppingCart"/>
					            <if-not-empty field="shoppingCart">
					                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
					                    <string value="STORE_LOCATION"/>
					                    <field field="parameters.storeId" type="String"/>
					                </call-object-method>
					                <set field="parameters.shipMethod" value="NO_SHIPPING@_NA_"/>
					                <!-- <call-simple-method method-name="setShippingOption"/> -->
					            </if-not-empty>
					        </if-not-empty>
				        </if-compare>
			        </if-not-empty>
		        </if-compare>
	        </if-compare>
	        
	        <!--  if shipping applies and there is no shipping option selected and no store selected then return error -->
	        <if-compare operator="equals" value="true" field="shippingApplies">
	            <if-empty field="parameters.shipping_method">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoShippingMethodError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="NO_SHIPPING_METHOD" list="error_list"/>
	            <else>
	                <!--  Validation for store pickup -->
	                <if-compare operator="equals" value="NO_SHIPPING@_NA_" field="parameters.shipping_method">
	                    <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="checkStoreId">
	                        <string value="STORE_LOCATION"/>
	                    </call-object-method>
	                    <if-empty field="checkStoreId">
	                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoStoreForPickupError"/>
	                        <string-to-list string="${tempErrorMessage}" message-field="NO_STORE_PICKUP" list="error_list"/>
	                    </if-empty>
		            <else>
		                <call-simple-method method-name="removeStorePickup"/>
		            </else>
	                </if-compare>
	            </else>
	            </if-empty>
	        </if-compare>
            
            <if-not-empty field="parameters.shipping_instructions">
                <call-object-method method-name="setAllShippingInstructions" obj-field="shoppingCart">
                    <field field="parameters.shipping_instructions"/>
                </call-object-method>
            </if-not-empty>
        </if-compare>
        
        <check-errors/>

    </simple-method>
    
    <simple-method method-name="anonMultiPageValidateShippingOption" short-description="anon validate shipping method" login-required="false">
        <session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        
        <!--  if shipping applies and there is no shipping option selected and no store selected then return error -->
        <if-compare operator="equals" value="true" field="shippingApplies">

            <!-- if only one store is open and Store Pickup is selected, then use this store -->
	        <if-compare operator="equals" value="true" field="shippingApplies">
	        	<if-compare operator="equals" value="NO_SHIPPING@_NA_" field="parameters.shipMethodd">
			        <if-not-empty field="parameters.oneStoreOpen">
			        	<if-compare operator="equals" value="Y" field="parameters.oneStoreOpen">
					        <if-not-empty field="parameters.storeId">
					            <session-to-field field="shoppingCart"/>
					            <if-not-empty field="shoppingCart">
					                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
					                    <string value="STORE_LOCATION"/>
					                    <field field="parameters.storeId" type="String"/>
					                </call-object-method>
					                <set field="parameters.shipMethod" value="NO_SHIPPING@_NA_"/>
					                <!-- <call-simple-method method-name="setShippingOption"/> -->
					            </if-not-empty>
					        </if-not-empty>
				        </if-compare>
			        </if-not-empty>
		        </if-compare>
	        </if-compare>
	        
	        <!--  if shipping applies and there is no shipping option selected and no store selected then return error -->
	        <if-compare operator="equals" value="true" field="shippingApplies">
	            <if-empty field="parameters.shipMethod">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoShippingMethodError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="NO_SHIPPING_METHOD" list="error_list"/>
	            <else>
	                <!--  Validation for store pickup -->
	                <if-compare operator="equals" value="NO_SHIPPING@_NA_" field="parameters.shipMethod">
	                    <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="checkStoreId">
	                        <string value="STORE_LOCATION"/>
	                    </call-object-method>
	                    <if-empty field="checkStoreId">
	                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NoStoreForPickupError"/>
	                        <string-to-list string="${tempErrorMessage}" message-field="NO_STORE_PICKUP" list="error_list"/>
	                    </if-empty>
	                </if-compare>
	            </else>
	            </if-empty>
	        </if-compare>
	        
            <if-not-empty field="parameters.shipping_instructions">
                <call-object-method method-name="setAllShippingInstructions" obj-field="shoppingCart">
                    <field field="parameters.shipping_instructions"/>
                </call-object-method>
            </if-not-empty>
        </if-compare>
        
        <check-errors/>

    </simple-method>
    
    <simple-method method-name="setShippingOption" short-description="Set shipping method" login-required="false">
        <call-bsh><![CDATA[
            shippingMethod = parameters.get("shipMethod");
            shipmentMethodTypeId = "";
            carrierPartyId = "";
            if(shippingMethod != null && shippingMethod != "") 
            {
                if (shippingMethod.indexOf("@") != -1) 
                {
                    shipmentMethodTypeId = shippingMethod.substring(0, shippingMethod.indexOf("@"));
                    carrierPartyId = shippingMethod.substring(shippingMethod.indexOf("@")+1);
                    parameters.put("shipmentMethodTypeId", shipmentMethodTypeId);
                    parameters.put("carrierPartyId", carrierPartyId);
                }
                else
                {
                  if (shippingMethod.indexOf(":") != -1) 
                  {
                    carrierPartyId = shippingMethod.substring(shippingMethod.indexOf("@")+1, shippingMethod.indexOf(":"));
                    productStoreShipMethId =  shippingMethod.substring(shippingMethod.indexOf(":")+1);
                    parameters.put("productStoreShipMethId", productStoreShipMethId);
                    parameters.put("carrierPartyId", carrierPartyId);
                  }
                } 
            }
        ]]></call-bsh>
        <set field="shipmentMethodTypeId" from-field="parameters.shipmentMethodTypeId"/>
        <set field="carrierPartyId" from-field="parameters.carrierPartyId"/>
        <set field="productStoreShipMethId" from-field="parameters.productStoreShipMethId"/>
        <log level="info" message=" shipmentMethodTypeId is ${shipmentMethodTypeId} "/>
        <log level="info" message=" carrierPartyId is ${carrierPartyId}"/>
        <log level="info" message=" productStoreShipMethId is ${productStoreShipMethId}"/>

        <entity-one entity-name="CarrierAndShipmentMethod" value-field="shipmentMethod" use-cache="true">
            <field-map field-name="shipmentMethodTypeId" from-field="shipmentMethodTypeId"/>
            <field-map field-name="partyId" from-field="carrierPartyId"/>
            <field-map field-name="roleTypeId" value="CARRIER"/>
        </entity-one>
        <field-to-request field="shipmentMethod.description" request-name="shippingDescription"/>

        <set field="shoppingCart" from-field="parameters.shoppingCart"/>
        <if-empty field="shoppingCart">
            <session-to-field field="shoppingCart"/>
        </if-empty>
        <call-object-method obj-field="shoppingCart" method-name="setShipmentMethodTypeId">
            <field field="shipmentMethodTypeId"/>
        </call-object-method>
        <call-object-method obj-field="shoppingCart" method-name="setCarrierPartyId">
            <field field="carrierPartyId"/>
        </call-object-method>
        <call-object-method obj-field="shoppingCart" method-name="setProductStoreShipMethId">
            <field field="productStoreShipMethId"/>
        </call-object-method>
        <call-object-method  obj-field="shoppingCart" method-name="getCurrency" ret-field="isoCode"/>
        <set field="dispatcher" from-field="parameters.dispatcher" type="Object"/>
        <set field="delegator" from-field="parameters.delegator" type="Object"/>
        <set field="locale" from-field="parameters.locale" type="Object"/>
        
        <if-compare field="parameters.shipMethod" operator="equals" value="NO_SHIPPING@_NA_">
        	<if-not-empty field="parameters.storeId">
        		<call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="STORE_LOCATION"/>
                    <field field="parameters.storeId" type="String"/>
                </call-object-method>
        	</if-not-empty>
        	<else>
        		<call-simple-method method-name="removeStorePickup"/>
        	</else>
        </if-compare>

        <call-class-method method-name="doPromotions" class-name="org.ofbiz.order.shoppingcart.product.ProductPromoWorker">
            <field field="shoppingCart" type="org.ofbiz.order.shoppingcart.ShoppingCart"/>
            <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
        </call-class-method>
        <field-to-request field="parameters.shippingTotal" request-name="shippingTotal"/>
        <field-to-request field="parameters.cartGrandTotal" request-name="cartGrandTotal"/>
        <field-to-request field="parameters.totalSalesTax" request-name="totalSalesTax"/>
        <log level="info" message="Shipping total is : ${parameters.shippingTotal}"/>
        <log level="info" message="Cart Grand total is : ${parameters.cartGrandTotal}"/>
        <log level="info" message="Total sale tax is : ${parameters.totalSalesTax}"/>
    </simple-method>

    <simple-method method-name="setShippingAddressToCart" short-description="Set shipping address to cart" login-required="false">

        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <!--   Get shipping contact mech Id from cart     -->
        <call-object-method obj-field="shoppingCart" method-name="getShippingContactMechId" ret-field="shippingContactMechId"/>

        <if-empty field="shippingContactMechId">
            <!--   If shipping contact mech id not exist create the new contact mech     -->
            <make-value entity-name="ContactMech" value-field="contactMech"/>
            <sequenced-id sequence-name="ContactMech" field="contactMech.contactMechId"/>
            <set field="contactMech.contactMechTypeId" value="POSTAL_ADDRESS" />
            <create-value value-field="contactMech"/>
            <set field="shippingContactMechId" from-field="contactMech.contactMechId" />
            <!--   make the postal address    -->
            <make-value entity-name="PostalAddress" value-field="postalAddress"/>
            <set field="postalAddress.contactMechId" from-field="shippingContactMechId"/>
            <set-nonpk-fields map="parameters" value-field="postalAddress"/>
            <create-value value-field="postalAddress"/>
            <log level="info" message=" create Shipping Contact Mech id: ${shippingContactMechId}"/>
            <!--   Set shipping contact mech Id to cart     -->
            <call-object-method obj-field="shoppingCart" method-name="setShippingContactMechId">
                <field field="shippingContactMechId"/>
            </call-object-method>
        <else>
            <!--   If shipping contact mech id exist update the postal address     -->
            <log level="info" message=" update Shipping Contact Mech id: ${shippingContactMechId}"/>
            <make-value entity-name="PostalAddress" value-field="postalAddress"/>
            <set field="postalAddress.contactMechId" from-field="shippingContactMechId"/>
            <find-by-primary-key map="postalAddress" value-field="lookedUpValue"/>
            <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
            <store-value value-field="lookedUpValue"/>
        </else>
        </if-empty>

    </simple-method>
    
    <simple-method method-name="checkShippingApplies" short-description="Checks if shipping Applies to Cart" login-required="false">
        <session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>
        <!-- Ofbiz by default will redirect checkout flow to Order Summary (payment) screen if no shipping applies, so we need to set the next screen when no shipping applies. -->
        <if-compare operator="equals" value="false" field="shippingApplies">
            <return response-code="shippingaddress"/>
        </if-compare>
    </simple-method>

<!-- ORDER METHODS -->    
    <simple-method method-name="setOrderAdditionalEmails" short-description="Validate and Set Order Additional Emails To Cart" login-required="false">
        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <call-object-method obj-field="shoppingCart" method-name="getOrderId" ret-field="orderId"/>
        <call-class-method method-name="getParameterMap" class-name="org.ofbiz.base.util.UtilHttp" ret-field="paramMap">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
        </call-class-method>
        <set field="orderAdditionalEmailIds" value=""/>
        
        <!-- Iterating the list of Email Ids -->
        <iterate-map map="paramMap" key="parameterName" value="parameterValue">
            <call-object-method obj-field="parameterName" method-name="lastIndexOf" ret-field="underscorePos">
                <string value="_"/>
            </call-object-method>
            <if-compare operator="greater-equals" value="0" field="underscorePos" type="Integer">
                <call-object-method obj-field="parameterName" method-name="toUpperCase" ret-field="parameterNameUpper"/>
                <call-object-method obj-field="parameterNameUpper" method-name="startsWith" ret-field="isParameterNameUpperStartWith" >
                    <string value="ORDERADDITIONALEMAIL"/>
                </call-object-method>
                <if-compare operator="equals" value="true" field="isParameterNameUpperStartWith" type="Boolean">
                    <set field="emailValid" value="true"/>
                    <set field="emailAddress" from-field="parameterValue"/>
                    
                    <call-object-method obj-field="parameterName" method-name="length" ret-field="parameterNameLength"/>
                    <calculate field="underscorePos">
                        <calcop operator="add" >
                            <calcop operator="get" field="underscorePos"/>
                            <number value="1"/>
                        </calcop>
                    </calculate>
                    <set field="parameterNameStartIndex" from-field="underscorePos" type="Integer" />
                    <set field="parameterNameEndIndex" from-field="parameterNameLength" type="Integer" />
                    <call-object-method obj-field="parameterName" method-name="substring" ret-field="parameterNameIndex">
                        <field field="parameterNameStartIndex" type="int"/>
                        <field field="parameterNameEndIndex" type="int"/>
                    </call-object-method>
                    <if-not-empty field="emailAddress">
                        <call-class-method method-name="isEmail" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isEmailValid">
                            <field field="emailAddress" type="String"/>
                        </call-class-method>
                        <if-compare field="isEmailValid" operator="equals" value="false">
                            <set field="emailValid" value="false"/>
                        </if-compare>
                    </if-not-empty>
                    
                    <!-- Logic to display Inline error message for invalid email -->
                    <if-compare operator="equals" value="false" field="emailValid">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidEmailError"/>
                        <if>
                            <condition> 
                                <if-compare operator="equals" value="1" field="parameterNameIndex"/>
                            </condition>
                             <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_1" list="error_list"/>
                            </then>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="2" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_2" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="3" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_3" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="4" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_4" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="5" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_5" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="6" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_6" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="7" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_7" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="8" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_8" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="9" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_9" list="error_list"/>
                            </then>
                        </else-if>
                        <else-if>
                            <condition> 
                                <if-compare operator="equals" value="10" field="parameterNameIndex"/>
                            </condition>
                            <then>
                                <string-to-list string="${tempErrorMessage}" message-field="orderAdditionalEmail_10" list="error_list"/>
                            </then>
                        </else-if>
                        </if>
                    <else>
                    <!-- if Email address is valid, add it to a list -->
                        <if-not-empty field="emailAddress">
                            <string-to-list string="${emailAddress}" list="validEmailAddressList"/>
                         </if-not-empty>
                    </else>
                    </if-compare>
                </if-compare>
            </if-compare>
        </iterate-map>
        <check-errors/>
        <if-not-empty field="validEmailAddressList">
            <iterate list="validEmailAddressList" entry="toAddress">
                <!-- user login -->
                <entity-one entity-name="UserLogin" value-field="systemUserLogin" auto-field-map="false">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <!-- ProductStoreID -->
                <if-empty field="parameters.productStoreId">
                    <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="productStoreId">
                        <field field="request" type="javax.servlet.ServletRequest"/>
                    </call-class-method>
                    <set field="parameters.productStoreId" from-field="productStoreId"/>
                <else>
                    <set field="productStoreId" from-field="parameters.productStoreId"/>
                </else>
                </if-empty>
                <!-- Create Communication Event-->
                <set field="createComEventMap.userLogin" from-field="systemUserLogin"/>
                <set field="createComEventMap.toString" from-field="toAddress"/>
                <set field="createComEventMap.communicationEventTypeId" value="EMAIL_COMMUNICATION"/>
                <set field="createComEventMap.contactMechTypeId" value="EMAIL_ADDRESS"/>
                <call-service service-name="createCommunicationEventWithoutPermission" in-map-name="createComEventMap">
                    <result-to-field result-name="communicationEventId" field="communicationEventId"/>
                </call-service>
                <set field="emailParams.communicationEventId" from-field="communicationEventId"/>
                <set field="emailType" value="PRDS_ODR_CONFIRM"/>
                <set field="bodyParameters.productStoreId" from-field="parameters.productStoreId"/>
                <set field="bodyParameters.emailType" from-field="emailType"/>
                <set field="bodyParameters.templateId" value="E_ORDER_CONFIRM"/>
                <set field="bodyParameters.partyId" from-field="parameters.customerId"/>
                <set field="bodyParameters.orderId" from-field="parameters.orderId"/>
                <entity-one entity-name="ProductStoreEmailSetting" value-field="productStoreEmailSetting">
                    <field-map field-name="productStoreId" from-field="parameters.productStoreId"/>
                    <field-map field-name="emailType" value="PRDS_EMAIL_TEST"/>
                </entity-one>
                <!-- Send email-->
                <if-not-empty field="productStoreEmailSetting.bodyScreenLocation">
                    <set field="emailParams.bodyParameters" from-field="bodyParameters"/>
                    <set field="emailParams.userLogin" from-field="systemUserLogin"/>
                    <set field="emailParams.sendTo" from-field="toAddress"/>
                    <set field="emailParams.subject" from-field="parameters.emailSubject"/>
                    <set field="emailParams.sendFrom" from-field="parameters.fromAddress"/>
                    <set field="emailParams.emailType" from-field="emailType"/>
                    <set field="emailParams.contentType" from-field="productStoreEmailSetting.contentType"/>
                    <call-service service-name="sendMailFromScreen" in-map-name="emailParams" break-on-error="false">
                        <result-to-field result-name="errorMessageList" field="mailSendErrorMessageList"/>
                        <result-to-field result-name="errorMessage" field="mailSendErrorMessage"/>
                    </call-service>
                </if-not-empty>
            </iterate>
                <property-to-field field="tempSuccessMessage" resource="OSafeUiLabels" property="EmailSentSuccess"/>
                <string-to-list string="${tempSuccessMessage}"  list="success_list"/>
                <field-to-request field="success_list" request-name="osafeSuccessMessageList" />
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="processCartAttribute" short-description="process Cart Attribute" login-required="false">
        
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="storeId">
                <string value="STORE_LOCATION"/>
            </call-object-method>
            <if-not-empty field="storeId">
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="DELIVERY_OPTION"/>
                    <string value="STORE_PICKUP"/>
                </call-object-method>
            <else>
	            <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="deliveryOption">
	                <string value="DELIVERY_OPTION"/>
	            </call-object-method>
               <if-empty field="deliveryOption">
	                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
	                    <string value="DELIVERY_OPTION"/>
	                    <string value="SHIP_TO"/>
	                </call-object-method>
               </if-empty>
            </else>
            </if-not-empty>

            <call-object-method obj-field="shoppingCart" method-name="getAttribute" ret-field="guestCheckoutAttr">
                <string value="GUEST_CHECKOUT"/>
            </call-object-method>
            <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                <string value="IS_DOWNLOADED"/>
                <string value="N"/>
            </call-object-method>
            <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="checkoutConfirmCookies">
                <field field="request" type="javax.servlet.ServletRequest"/>
                <string value="CHECKOUT_CONFIRM_GET_COOKIE"/>
            </call-class-method>
            <if-not-empty field="checkoutConfirmCookies">
              <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="checkoutConfirmCookieNames">
                <field field="checkoutConfirmCookies" type="String"/>
                <string value=","/>
              </call-class-method>
              <iterate list="checkoutConfirmCookieNames" entry="confirmCookieName">
                    <call-object-method obj-field="session" method-name="getAttribute" ret-field="checkoutConfirmOrderAttr">
                        <field field="confirmCookieName" type="String"/>
                    </call-object-method>
                    <if-not-empty field="checkoutConfirmOrderAttr">
                         <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                            <field field="confirmCookieName" type="String"/>
                            <field field="checkoutConfirmOrderAttr" type="String"/>
                          </call-object-method>
                    </if-not-empty>
              </iterate>
            </if-not-empty>         
	        <call-object-method method-name="removeOrderAttribute" obj-field="shoppingCart">
	            <string value="GIFT_CARD_NUMBER"/>
	        </call-object-method>
	        <call-object-method method-name="removeOrderAttribute" obj-field="shoppingCart">
	            <string value="GIFT_CARD_REMAINING_BAL"/>
	        </call-object-method>
	        
          <call-class-method class-name="com.osafe.events.ShoppingCartEvents" method-name="formatGiftMessageOrderItemAttribute" ret-field="result">
             <field field="request" type="javax.servlet.http.HttpServletRequest"/>
             <field field="response" type="javax.servlet.http.HttpServletResponse"/>
          </call-class-method>
	        
        </if-not-empty>
    </simple-method>


    <simple-method method-name="processBigfishInventory" short-description="process Cart Attribute" login-required="false">
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="storeId">
                <string value="STORE_LOCATION"/>
            </call-object-method>
            
            <call-object-method method-name="items" obj-field="shoppingCart" ret-field="shoppingCartItems"/>
            <call-object-method method-name="getProductStoreId" obj-field="shoppingCart" ret-field="productStoreId"/>
            
            <if-not-empty field="storeId">
               <set field="deliveryOption" value="STORE_PICKUP"/>
            <else>
                <set field="deliveryOption" value="SHIP_TO"/>
            </else>
            </if-not-empty>
                
            <if-not-empty field="shoppingCartItems">
                <iterate entry="shoppingCartItem" list="shoppingCartItems">
                    <call-class-method class-name="com.osafe.services.InventoryServices" method-name="setProductInventoryLevel" >
                        <field field="shoppingCartItem.productId"/>
                        <field field="productStoreId"/>
                        <field field="shoppingCartItem.quantity" type="BigDecimal"/>
                        <field field="deliveryOption"/>
                    </call-class-method>
                </iterate>
            </if-not-empty>
        </if-not-empty>
    </simple-method>    
<!-- STORE PICKUP METHODS -->
    <simple-method method-name="setStorePickup" short-description="Set Store For Pickup Order" login-required="false">
        <if-not-empty field="parameters.storeId">
            <session-to-field field="shoppingCart"/>
            <if-not-empty field="shoppingCart">
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="STORE_LOCATION"/>
                    <field field="parameters.storeId" type="String"/>
                </call-object-method>
                <set field="parameters.shipMethod" value="NO_SHIPPING@_NA_"/>
                <call-simple-method method-name="setShippingOption"/>
            </if-not-empty>
        </if-not-empty>

       <call-simple-method method-name="getCheckoutFlow"/>
    </simple-method>

    <simple-method method-name="removeStorePickup" short-description="Remove Store For Pickup Order" login-required="false">
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="removeOrderAttribute" obj-field="shoppingCart">
                <string value="STORE_LOCATION"/>
            </call-object-method>
        <else>
            <return response-code="error"/>
        </else>
        </if-not-empty>
    </simple-method>
    
<!-- TAX METHODS -->
    <simple-method method-name="calcTaxOptions" short-description="choose whether tax will be calculated based on Shipping Address or Store Address" login-required="false">
    	<session-to-field field="shoppingCart"/>
        <call-object-method obj-field="shoppingCart" method-name="getShipmentMethodTypeId" ret-field="shipmentMethodTypeId"/>
        <call-object-method obj-field="shoppingCart" method-name="getCarrierPartyId" ret-field="carrierPartyId"/>
        <if-not-empty field="shipmentMethodTypeId">
            <if-not-empty field="carrierPartyId">
                 <set field="chosenShippingMethod" value="${shipmentMethodTypeId}@${carrierPartyId}"/>
            </if-not-empty>
        </if-not-empty>
        <if-compare operator="not-equals" value="NO_SHIPPING@_NA_" field="chosenShippingMethod">
        	<return response-code="shippingAddress"/>
        <else>
        	<return response-code="storeAddress"/>
        </else>
       </if-compare>
    </simple-method>
    
</simple-methods>