<?xml version="1.0" encoding="UTF-8" ?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="setStorePickup" short-description="Set Store For Pickup Order" login-required="false">
        <if-not-empty field="parameters.storeId">
            <session-to-field field="shoppingCart"/>
            <if-not-empty field="shoppingCart">
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="STORE_LOCATION"/>
                    <field field="parameters.storeId" type="String"/>
                </call-object-method>
                <set field="parameters.shipMethod" value="NO_SHIPPING@_NA_"/>
                <call-simple-method method-name="setShippingOption" xml-resource="component://ecommerce/script/org/ofbiz/ecommerce/customer/CustomerEvents.xml"/>
            </if-not-empty>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="removeStorePickup" short-description="Remove Store For Pickup Order" login-required="false">
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="removeOrderAttribute" obj-field="shoppingCart">
                <string value="STORE_LOCATION"/>
            </call-object-method>
        <else>
            <return response-code="error"/>
        </else>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="processCartAttribute" short-description="process Cart Attribute" login-required="false">
        
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="storeId">
                <string value="STORE_LOCATION"/>
            </call-object-method>
            <if-not-empty field="storeId">
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="DELIVERY_OPTION"/>
                    <string value="STORE_PICKUP"/>
                </call-object-method>
            <else>
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="DELIVERY_OPTION"/>
                    <string value="SHIP_TO"/>
                </call-object-method>
            </else>
            </if-not-empty>

            <call-object-method obj-field="shoppingCart" method-name="getAttribute" ret-field="guestCheckoutAttr">
                <string value="GUEST_CHECKOUT"/>
            </call-object-method>
            <if-not-empty field="guestCheckoutAttr">
                <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
                    <string value="IS_DOWNLOADED"/>
                    <string value="N"/>
                </call-object-method>
            </if-not-empty>
	        <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="checkoutConfirmCookies">
	            <field field="request" type="javax.servlet.ServletRequest"/>
	            <string value="CHECKOUT_CONFIRM_GET_COOKIE"/>
	        </call-class-method>
            <if-not-empty field="checkoutConfirmCookies">
              <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="checkoutConfirmCookieNames">
	            <field field="checkoutConfirmCookies" type="String"/>
	            <string value=","/>
   	          </call-class-method>
              <iterate list="checkoutConfirmCookieNames" entry="confirmCookieName">
		            <call-object-method obj-field="session" method-name="getAttribute" ret-field="checkoutConfirmOrderAttr">
        	            <field field="confirmCookieName" type="String"/>
		            </call-object-method>
                    <if-not-empty field="checkoutConfirmOrderAttr">
				         <call-object-method method-name="setOrderAttribute" obj-field="shoppingCart">
          	                <field field="confirmCookieName" type="String"/>
         	                <field field="checkoutConfirmOrderAttr" type="String"/>
			              </call-object-method>
                    </if-not-empty>
              </iterate>
            </if-not-empty>	        
            
        </if-not-empty>
    </simple-method>

    <simple-method method-name="processPayPalContactMech" short-description="remove contact mech from shopping cart" login-required="false">
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="removeContactMech" obj-field="shoppingCart" ret-field="storeId">
                <string value="BILLING_LOCATION"/>
            </call-object-method>
            <call-object-method method-name="removeContactMech" obj-field="shoppingCart" ret-field="storeId">
                <string value="ORDER_EMAIL"/>
            </call-object-method>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="processBigfishInventory" short-description="process Cart Attribute" login-required="false">
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="storeId">
                <string value="STORE_LOCATION"/>
            </call-object-method>
            
            <call-object-method method-name="items" obj-field="shoppingCart" ret-field="shoppingCartItems"/>
            <call-object-method method-name="getProductStoreId" obj-field="shoppingCart" ret-field="productStoreId"/>
            
            <if-not-empty field="storeId">
               <set field="deliveryOption" value="STORE_PICKUP"/>
            <else>
                <set field="deliveryOption" value="SHIP_TO"/>
            </else>
            </if-not-empty>
                
            <if-not-empty field="shoppingCartItems">
                <iterate entry="shoppingCartItem" list="shoppingCartItems">
                    <call-class-method class-name="com.osafe.services.InventoryServices" method-name="setProductInventoryLevel" >
                        <field field="shoppingCartItem.productId"/>
                        <field field="productStoreId"/>
                        <field field="shoppingCartItem.quantity" type="BigDecimal"/>
                        <field field="deliveryOption"/>
                    </call-class-method>
                </iterate>
            </if-not-empty>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="getCheckoutFlow" short-description="Get Checkout Flow mutli or single step" login-required="false">

        <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="isCheckoutSinglePage">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <string value="CHECKOUT_SINGLE_PAGE"/>
        </call-class-method>

        <session-to-field field="userLogin"/>
        <if>
          <condition>
              <or>
                  <if-empty field="userLogin"/>
                  <if-compare operator="equals" value="anonymous" field="userLogin.userLoginId"></if-compare>
              </or>
          </condition>
          <then>
              <set field="isAnonymous" value="TRUE"/>
          </then>
          <else>
              <set field="isAnonymous" value="FALSE"/>
          </else>
        </if>

        <if-validate-method class="com.osafe.util.Util" field="isCheckoutSinglePage" method="isProductStoreParmTrue">
            <if-compare operator="equals" value="TRUE" field="isAnonymous">
                <return response-code="anonSinglePage"/>
                <else>
                    <return response-code="singlePage"/>
                </else>
            </if-compare>
        <else>
            <if-compare operator="equals" value="TRUE" field="isAnonymous">
                <return response-code="anonMultiPage"/>
                <else>
                    <return response-code="multiPage"/>
                </else>
            </if-compare>
        </else>
        </if-validate-method>
    </simple-method>

    <simple-method method-name="annonMultiPageCreateCustomer" short-description="make personal, billing and shipping address for Anon User mutli Page Checkout" login-required="false">
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <if-empty field="parameters.isSameAsBilling">
            <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <else>
            <map-to-map map="addressContext" to-map="shippingAddressContext"/>
            <property-to-field field="shippingAddressContext.attnName" resource="OSafeUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
        </else>
        </if-empty>
        <check-errors/>

        <!-- set is same as billing check in shopping cart Attribute which will remove after return back from paypal -->
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <set field="isSameAsBilling" from-field="parameters.isSameAsBilling" default-value="N"/>
            <call-object-method method-name="removeAttribute" obj-field="shoppingCart">
                <string value="isSameAsBilling"/>
            </call-object-method>
            <call-object-method method-name="setAttribute" obj-field="shoppingCart">
                <string value="isSameAsBilling"/>
                <field field="isSameAsBilling" type="Object"/>
            </call-object-method>
        </if-not-empty>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
    </simple-method>

    <simple-method method-name="anonMultiPageSubmitOrder" short-description="submit order for anon multi page" login-required="false">
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="checkPaymentMethodType" />
        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
            <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-compare>
        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
            <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
            <call-simple-method method-name="createCreditCardPayment"/>
            <return response-code="creditCard"/>
         <else>
              <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
                  <session-to-field field="shoppingCart"/>
                  <call-bsh>
                   <![CDATA[
                       shoppingCart.addPaymentAmount("EXT_COD", shoppingCart.getGrandTotal(), false);
                   ]]>
                   </call-bsh>
                   <return response-code="cod"/>
              </if-compare>
         </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="anonMultiPagePayPalSubmitOrder" short-description="submit order for anon multi page pay pal" login-required="false">

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>

        <call-simple-method method-name="createUserLogin"/>
    </simple-method>
    
    <simple-method method-name="anonSinglePageEBSCheckout" short-description="validate and store customer information before redirect to EBS for anon single page" login-required="false">
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <if-empty field="parameters.isSameAsBilling">
            <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <else>
            <map-to-map map="addressContext" to-map="shippingAddressContext"/>
            <property-to-field field="shippingAddressContext.attnName" resource="OSafeUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
        </else>
        </if-empty>
        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <!-- set is same as billing check in shopping cart Attribute which will remove after return back from EBS -->
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <set field="isSameAsBilling" from-field="parameters.isSameAsBilling" default-value="N"/>
            <call-object-method method-name="removeAttribute" obj-field="shoppingCart">
                <string value="isSameAsBilling"/>
            </call-object-method>
            <call-object-method method-name="setAttribute" obj-field="shoppingCart">
                <string value="isSameAsBilling"/>
                <field field="isSameAsBilling" type="Object"/>
            </call-object-method>
        </if-not-empty>

        <!-- store the customer information -->
        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="anonMultiPageEBSCheckout" short-description="make user account if value is entered before redirect to EBS for anon multi page" login-required="false">
        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="singlePageEBSCheckout" short-description="validate and store customer information before redirect to EBS for single page" login-required="false">
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <check-errors/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
    </simple-method>
    
    <simple-method method-name="multiPageEBSCheckout" short-description="submit order for multi page" login-required="false">
        <!-- Nothing is required -->
    </simple-method>
    
    <simple-method method-name="multiPageSubmitOrder" short-description="submit order for multi page" login-required="false">
        <call-simple-method method-name="checkPaymentMethodType" />
            <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
                <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
                <check-errors/>
                <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
                <call-simple-method method-name="createCreditCardPayment"/>
                <return response-code="creditCard"/>
            <else>
                 <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
                     <session-to-field field="shoppingCart"/>
                     <call-bsh>
                      <![CDATA[
                          shoppingCart.addPaymentAmount("EXT_COD", shoppingCart.getGrandTotal(), false);
                      ]]>
                      </call-bsh>
                      <return response-code="cod"/>
                 </if-compare>
            </else>
            </if-compare>
    </simple-method>
    
    <simple-method method-name="checkPaymentMethodType" short-description="sets the paymentMethodTypeId" login-required="false">
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method method-name="getOrderAttribute" obj-field="shoppingCart" ret-field="storeId">
                <string value="STORE_LOCATION"/>
            </call-object-method>
            <if-not-empty field="storeId">
                <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="isCCRequired">
                    <field field="request" type="javax.servlet.ServletRequest"/>
                    <string value="CHECKOUT_STORE_CC_REQ"/>
                </call-class-method>
                <call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="showCC">
                    <field field="request" type="javax.servlet.ServletRequest"/>
                    <string value="CHECKOUT_STORE_CC"/>
                </call-class-method>
                <if-validate-method class="com.osafe.util.Util" field="showCC" method="isProductStoreParmTrue">
                    <!-- CASE 1 : show = True ,Req =True -->
                    <if-compare operator="equals" value="true" field="isCCRequired">
                        <set field="parameters.paymentMethodTypeId" value="CREDIT_CARD"/>
                        <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                    <!-- CASE 2 : show = True ,Req = False -->
                    <else>
                        <set field="payInStore" from-field="parameters.payInStore"/>
                        <if-compare operator="equals" value="Y" field="payInStore">
                           <set field="parameters.paymentMethodTypeId" value="EXT_COD"/>
                           <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                        <else>
                            <set field="parameters.paymentMethodTypeId" value="CREDIT_CARD"/>
                            <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                        </else>
                        </if-compare>
                    </else>
                    </if-compare>
                    <!-- CASE 3 & 4 : show = False  -->
                <else>
                    <set field="parameters.paymentMethodTypeId" value="EXT_COD"/>
                    <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
                </else>
                </if-validate-method>
            <else>
                <set field="parameters.paymentMethodTypeId" value="CREDIT_CARD"/>
                <field-to-request field="parameters.paymentMethodTypeId" request-name="paymentMethodTypeId"/>
            </else>
            </if-not-empty>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="anonSinglePageSubmitOrder" short-description="submit order for anon single page" login-required="false">

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <if-empty field="parameters.isSameAsBilling">
            <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <else>
            <map-to-map map="addressContext" to-map="shippingAddressContext"/>
            <property-to-field field="shippingAddressContext.attnName" resource="OSafeUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
        </else>
        </if-empty>

        <call-simple-method method-name="checkPaymentMethodType" />
        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
            <set field="parameters.firstNameOnCard" from-field="personContext.firstName"/>
<!--        <set field="parameters.middleNameOnCard" from-field="personContext.middleName"/> -->
            <set field="parameters.lastNameOnCard" from-field="personContext.lastName"/>
            <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-compare>
        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
            <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
            <call-simple-method method-name="createCreditCardPayment"/>
            <return response-code="creditCard"/>
         <else>
              <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
                  <session-to-field field="shoppingCart"/>
                  <call-bsh>
                   <![CDATA[
                       shoppingCart.addPaymentAmount("EXT_COD", shoppingCart.getGrandTotal(), false);
                   ]]>
                   </call-bsh>
                   <return response-code="cod"/>
              </if-compare>
         </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="anonSinglePagePayPalSubmitOrder" short-description="submit order for anon single page pay pal" login-required="false">

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="anonSinglePageSetPayPalCheckout" short-description="validate and store customer information before redirect to pay pal for anon single page" login-required="false">

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <if-empty field="parameters.isSameAsBilling">
            <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <else>
            <map-to-map map="addressContext" to-map="shippingAddressContext"/>
            <property-to-field field="shippingAddressContext.attnName" resource="OSafeUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
        </else>
        </if-empty>
        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <!-- set is same as billing check in shopping cart Attribute which will remove after return back from paypal -->
        <session-to-field field="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <set field="isSameAsBilling" from-field="parameters.isSameAsBilling" default-value="N"/>
            <call-object-method method-name="removeAttribute" obj-field="shoppingCart">
                <string value="isSameAsBilling"/>
            </call-object-method>
            <call-object-method method-name="setAttribute" obj-field="shoppingCart">
                <string value="isSameAsBilling"/>
                <field field="isSameAsBilling" type="Object"/>
            </call-object-method>
        </if-not-empty>

        <!-- store the customer information -->
        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="anonMultiPageSetPayPalCheckout" short-description="make user account if value is entered before redirect to pay pal for anon multi page" login-required="false">

        <!-- Validate user login information -->
        <if-not-empty field="parameters.PASSWORD">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
            <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-not-empty>
        <check-errors/>

        <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
        <call-simple-method method-name="createUserLogin"/>
    </simple-method>

    <simple-method method-name="singlePageSetPayPalCheckout" short-description="validate and store customer information before redirect to pay pal for single page" login-required="false">

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <check-errors/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
    </simple-method>

    <simple-method method-name="singlePageSubmitOrder" short-description="submit order for anon single page" login-required="false">
        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="checkPaymentMethodType" />
        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
            <set field="parameters.firstNameOnCard" from-field="personContext.firstName"/>
<!--        <set field="parameters.middleNameOnCard" from-field="personContext.middleName"/> -->
            <set field="parameters.lastNameOnCard" from-field="personContext.lastName"/>
            <call-simple-method method-name="validateCreditCard" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        </if-compare>
        <check-errors/>

        <call-simple-method method-name="createUpdatePerson"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
        <if-compare operator="equals" value="CREDIT_CARD" field="parameters.paymentMethodTypeId">
            <set field="creditCardContext.partyId" from-field="userLogin.partyId"/>
            <call-simple-method method-name="createCreditCardPayment"/>
            <return response-code="creditCard"/>
         <else>
              <if-compare operator="equals" value="EXT_COD" field="parameters.paymentMethodTypeId">
                  <session-to-field field="shoppingCart"/>
                  <call-bsh>
                   <![CDATA[
                       shoppingCart.addPaymentAmount("EXT_COD", shoppingCart.getGrandTotal(), false);
                   ]]>
                   </call-bsh>
                   <return response-code="cod"/>
              </if-compare>
         </else>
        </if-compare>
    </simple-method>
    <simple-method method-name="multiPageUpdateCustomerAddress" short-description="make billing and shipping address for order" login-required="false">

        <!-- Validate Billing and shipping Postal Address information -->
        <call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <check-errors/>

        <call-simple-method method-name="createUpdateCustomerInfo"/>

    </simple-method>

    <simple-method method-name="setAnonUserLogin" short-description="Set user login in the session" login-required="false">
        <set field="partyId" from-field="parameters.partyId"/>
        <if-empty field="userLogin">
            <entity-one entity-name="UserLogin" value-field="userLogin">
                <field-map field-name="userLoginId" value="anonymous"/>
            </entity-one>
            <set field="userLogin.partyId" from-field="partyId"/>
            <set-current-user-login value-field="userLogin"/>
        <else>
            <!-- If an anonymous vistor is coming back, update the party id in the userLogin object -->
            <if-compare field="userLogin.userLoginId" operator="equals" value="anonymous">
                <set field="userLogin.partyId" from-field="partyId"/>
            </if-compare>
        </else>
        </if-empty>
        <field-to-request field="userLogin"/>
        <field-to-session field="userLogin"/>
        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-compare operator="not-equals" value="null" field="shoppingCart">
            <call-object-method obj-field="shoppingCart" method-name="setOrderPartyId">
                <field field="userLogin.partyId"/>
            </call-object-method>
             <call-object-method obj-field="shoppingCart" method-name="setUserLogin">
                 <field field="userLogin" type="org.ofbiz.entity.GenericValue"/>
                 <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
             </call-object-method>
             <call-object-method obj-field="shoppingCart" method-name="addAdditionalPartyRole">
                 <field field="userLogin.partyId"/>
                 <string value="GUEST_CUSTOMER"/>
             </call-object-method>
         </if-compare>
        <log level="info" message="anonymous userLogin is ${userLogin}"/>
    </simple-method>

    <simple-method method-name="createUpdatePerson" short-description="Create or Update person" login-required="false">
        <if-empty field="parameters.partyId">
            <!-- call the create person service -->
            <set-service-fields service-name="createPerson" to-map="createPersonCtx" map="personContext"/>
            <call-service service-name="createPerson" in-map-name="createPersonCtx">
                <result-to-field result-name="partyId" field="tempMap.partyId"/>
                <result-to-request result-name="partyId"/>
            </call-service>
            <set from-field="tempMap.partyId" field="parameters.partyId"/>
            <call-simple-method method-name="setAnonUserLogin"/>
            <!-- add the party to the customer role -->
            <set field="roleMap.roleTypeId" value="CUSTOMER"/>
            <set field="roleMap.partyId" from-field="tempMap.partyId"/>
            <call-service service-name="createPartyRole" in-map-name="roleMap"/>
        <else>
            <set from-field="parameters.partyId" field="personContext.partyId"/>
            <set-service-fields service-name="updatePerson" to-map="updatePersonCtx" map="personContext"/>
            <call-service service-name="updatePerson" in-map-name="updatePersonCtx"/>
            <set field="tempMap.partyId" from-field="parameters.partyId"/>
        </else>
        </if-empty>

        <!-- Sets gender and DOB in partyAttribute entity -->
        <call-simple-method method-name="createUpdatePartyAttributes" xml-resource="component://osafe/script/Event/UserProfileEvents.xml"/>

        <set from-field="tempMap.partyId" field="addressContext.partyId"/>
        <set from-field="tempMap.partyId" field="shippingAddressContext.partyId"/>
        <set from-field="tempMap.partyId" field="homePhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="workPhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="mobilePhoneContext.partyId"/>

        <!-- update phone contact -->
        <!-- home phone -->
        <if>
           <condition>
              <or>
                <not><if-empty field="contactHomePhoneMap.contactHomePhoneContact"></if-empty></not>
                <not><if-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"></if-empty></not>
              </or>
           </condition>
           <then>
               <if-not-empty field="parameters.homePhoneContactMechId">
                   <set field="homePhoneContext.contactMechId" from-field="parameters.homePhoneContactMechId"/>
                   <call-service service-name="updatePartyTelecomNumber" in-map-name="homePhoneContext">
                       <result-to-field result-name="contactMechId" field="homePhoneContext.contactMechId"/>
                   </call-service>
                   <else>
                       <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
                           <result-to-field result-name="contactMechId" field="homePhoneContext.contactMechId"/>
                       </call-service>
                       <set from-field="userLogin.partyId" field="homePhonePurposeContext.partyId"/>
                       <set from-field="homePhoneContext.contactMechId" field="homePhonePurposeContext.contactMechId"/>
       
                       <set value="PHONE_HOME" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                       <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
                       <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                       <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
                   </else>
               </if-not-empty>
          </then>
       </if>  
            
        <!-- work phone -->
        <if-not-empty field="parameters.workPhoneContactMechId">
            <set field="workPhoneContext.contactMechId" from-field="parameters.workPhoneContactMechId"/>
            <if-not-empty field="workPhoneContext.contactNumber">
                <call-service service-name="updatePartyTelecomNumber" in-map-name="workPhoneContext">
                    <result-to-field result-name="contactMechId" field="workPhoneContext.contactMechId"/>
                </call-service>
            <else>
                <call-service service-name="deletePartyContactMech" in-map-name="workPhoneContext"/>
            </else>
            </if-not-empty>
            <else>
                <if-not-empty field="workPhoneContext.contactNumber">
                    <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                        <result-to-field result-name="contactMechId" field="workPhoneContext.contactMechId"/>
                    </call-service>
                    <set from-field="userLogin.partyId" field="homePhonePurposeContext.partyId"/>
                    <set from-field="workPhoneContext.contactMechId" field="workPhonePurposeContext.contactMechId"/>

                    <set value="PHONE_WORK" field="workPhonePurposeContext.contactMechPurposeTypeId"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
                </if-not-empty>
            </else>
        </if-not-empty>

        <!-- mobile phone -->
        <if-not-empty field="parameters.mobilePhoneContactMechId">
            <set field="mobilePhoneContext.contactMechId" from-field="parameters.mobilePhoneContactMechId"/>
            <if-not-empty field="mobilePhoneContext.contactNumber">
                <call-service service-name="updatePartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhoneContext.contactMechId"/>
                </call-service>
            <else>
                <call-service service-name="deletePartyContactMech" in-map-name="mobilePhoneContext"/>
            </else>
            </if-not-empty>
        <else>
            <if-not-empty field="mobilePhoneContext.contactNumber">
                <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhoneContext.contactMechId"/>
                </call-service>
                <set from-field="userLogin.partyId" field="mobilePhonePurposeContext.partyId"/>
                <set from-field="mobilePhoneContext.contactMechId" field="mobilePhonePurposeContext.contactMechId"/>
                <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
            </if-not-empty>
        </else>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createUpdateCustomerInfo" short-description="Create or Update Customer Info" login-required="false">

        <if-not-empty field="personContext.emailAddress">
            <set-service-fields service-name="createPartyEmailAddress" to-map="emailContext" map="personContext"/>
            <call-service service-name="createPartyEmailAddress" in-map-name="emailContext">
                <result-to-field result-name="contactMechId" field="emailContext.contactMechId"/>
            </call-service>

            <!-- if purpose not exists create purpose -->
            <set from-field="emailContext.contactMechId" field="emailPurposeContext.contactMechId"/>
            <set from-field="emailContext.partyId" field="emailPurposeContext.partyId"/>
            <set value="PRIMARY_EMAIL" field="emailPurposeContext.contactMechPurposeTypeId"/>
            <entity-and entity-name="PartyContactMechPurpose" list="partyEmailContactMechPurposes">
                <field-map field-name="partyId" from-field="emailPurposeContext.partyId"/>
                <field-map field-name="contactMechId" from-field="emailPurposeContext.contactMechId"/>
                <field-map field-name="contactMechPurposeTypeId" from-field="emailPurposeContext.contactMechPurposeTypeId"/>
            </entity-and>
            <first-from-list list="partyEmailContactMechPurposes" entry="partyEmailContactMechPurpose"/>
            <if-empty field="partyEmailContactMechPurpose">
                <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
            </if-empty>
        </if-not-empty>

        <if-not-empty field="parameters.BILLINGAddressContactMechId">
            <set field="addressContext.contactMechId" from-field="parameters.BILLINGAddressContactMechId"/>
            <entity-one entity-name="PostalAddress" value-field="postalAddress">
                <field-map field-name="contactMechId" from-field="addressContext.contactMechId"/>
            </entity-one>
            <set field="addressContext.attnName" from-field="postalAddress.attnName"/>
            <if-empty field="addressContext.toName">
                <set field="addressContext.toName" from-field="postalAddress.toName"/>
            </if-empty>
            <set-service-fields service-name="updatePartyPostalAddress" to-map="updatePartyPostalAddressCtx" map="addressContext"/>
            <call-service service-name="updatePartyPostalAddress" in-map-name="updatePartyPostalAddressCtx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
            </call-service>
        <else>
            <set-service-fields service-name="createPartyPostalAddress" to-map="createPartyPostalAddressCtx" map="addressContext"/>
            <call-service service-name="createPartyPostalAddress" in-map-name="createPartyPostalAddressCtx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
            </call-service>
            <set value="BILLING_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
            <!-- also consider this address the general correspondence address -->
            <set value="GENERAL_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        </else>
        </if-not-empty>

        <if>
           <condition>
              <and>
                  <not><if-empty field="parameters.SHIPPINGAddressContactMechId" /></not>
                  <if-compare-field field="parameters.SHIPPINGAddressContactMechId" operator="not-equals" to-field="parameters.BILLINGAddressContactMechId"/>
              </and>
           </condition>
           <then>
                <set field="shippingAddressContext.contactMechId" from-field="parameters.SHIPPINGAddressContactMechId"/>
                <entity-one entity-name="PostalAddress" value-field="postalAddress">
                    <field-map field-name="contactMechId" from-field="shippingAddressContext.contactMechId"/>
                </entity-one>
                <if-empty field="shippingAddressContext.attnName">
                    <set field="shippingAddressContext.attnName" from-field="postalAddress.attnName"/>
                </if-empty>
                <if-empty field="shippingAddressContext.toName">
                    <set field="shippingAddressContext.toName" from-field="postalAddress.toName"/>
                </if-empty>
                <set-service-fields service-name="updatePartyPostalAddress" to-map="updatePartyPostalAddressCtx" map="shippingAddressContext"/>
                <call-service service-name="updatePartyPostalAddress" in-map-name="shippingAddressContext">
                    <result-to-field result-name="contactMechId" field="shippingAddressPurposeContext.contactMechId"/>
                </call-service>
           </then>
           <else>
                <if-not-empty field="parameters.SHIPPINGAddressContactMechId" >
                    <set field="deletePcmpCtx.contactMechId" from-field="addressPurposeContext.contactMechId"/>
                    <set field="deletePcmpCtx.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
                    <call-service service-name="deletePartyContactMechPurposeIfExists" in-map-name="deletePcmpCtx"/>
                    <entity-one entity-name="PostalAddress" value-field="postalAddress">
                        <field-map field-name="contactMechId" from-field="parameters.SHIPPINGAddressContactMechId"/>
                    </entity-one>
                    <if-empty field="shippingAddressContext.attnName">
                        <set field="shippingAddressContext.attnName" from-field="postalAddress.attnName"/>
                    </if-empty>
                    <if-empty field="shippingAddressContext.toName">
                        <set field="shippingAddressContext.toName" from-field="postalAddress.toName"/>
                    </if-empty>
                </if-not-empty>
                <set-service-fields service-name="createPartyPostalAddress" to-map="createPartyPostalAddressCtx" map="shippingAddressContext"/>
                <call-service service-name="createPartyPostalAddress" in-map-name="shippingAddressContext">
                    <result-to-field result-name="contactMechId" field="shippingAddressPurposeContext.contactMechId"/>
                </call-service>
                <set field="shippingAddressPurposeContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="shippingAddressPurposeContext"/>
           </else>
        </if>

        <!-- make Billing and shipping Postal Address for order-->
        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-compare operator="not-equals" value="null" field="shoppingCart">
            <call-object-method obj-field="shoppingCart" method-name="addContactMech">
                <string value="BILLING_LOCATION"/>
                <field field="addressPurposeContext.contactMechId"/>
            </call-object-method>
        </if-compare>
        <call-object-method obj-field="shoppingCart" method-name="setShippingContactMechId">
            <field field="shippingAddressPurposeContext.contactMechId"/>
        </call-object-method>
        <if-not-empty field="emailContext.contactMechId">
            <call-object-method obj-field="shoppingCart" method-name="addContactMech">
                <string value="ORDER_EMAIL"/>
                <field field="emailContext.contactMechId"/>
            </call-object-method>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createCreditCardPayment" short-description="Create credit card payment" login-required="false">

        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <call-object-method method-name="getContactMech" obj-field="shoppingCart" ret-field="contactMechId">
            <string value="BILLING_LOCATION"/>
        </call-object-method>
        <set field="creditCardContext.contactMechId" from-field="contactMechId"/>
        <call-service service-name="createCreditCard" in-map-name="creditCardContext">
            <default-message>Credit Card successfully created.</default-message>
            <result-to-request result-name="paymentMethodId"/>
            <result-to-field result-name="paymentMethodId" field="paymentMethodId"/>
        </call-service>
        <!-- Set Payment Method-->
         <if-not-empty field="paymentMethodId">
             <session-to-field field="shoppingCart" session-name="shoppingCart"/>
             <set field="cardSecurityCode" from-field="parameters.billToCardSecurityCode" set-if-null="true" set-if-empty="true"/>
             <create-object class-name="org.ofbiz.order.shoppingcart.CheckOutHelper" field="checkOutHelper">
                 <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
                 <field field="delegator" type="org.ofbiz.entity.Delegator"/>
                 <field field="shoppingCart" type="org.ofbiz.order.shoppingcart.ShoppingCart"/>
             </create-object>
             <set field="callResult" value="${groovy:checkOutHelper.finalizeOrderEntryPayment(paymentMethodId, null, false, false)}"/>
             <set field="cartPaymentInfo" value="${groovy: org.ofbiz.order.shoppingcart.ShoppingCart.CartPaymentInfo cpi = shoppingCart.getPaymentInfo(paymentMethodId, null, null, null, true); cpi.securityCode = cardSecurityCode; return cpi;}"/>
         </if-not-empty>
    </simple-method>

    <simple-method method-name="createUserLogin" short-description="Create  a user login" login-required="false">

        <!-- create login -->
        <if-not-empty field="userLoginContext.currentPassword">
            <set field="userLoginContext.partyId" from-field="userLogin.partyId"/>
            <set-service-fields service-name="createUserLogin" to-map="createUserLoginCtx" map="userLoginContext"/>
            <call-service service-name="createUserLogin" in-map-name="createUserLoginCtx"/>
            <entity-one entity-name="UserLogin" value-field="createdUserLogin">
                <field-map field-name="userLoginId" from-field="userLoginContext.userLoginId"/>
            </entity-one>
            <field-to-request field="createdUserLogin" request-name="createdUserLogin"/>
            <!-- send registration mail -->
            <call-simple-method method-name="sendRegistrationEmail" xml-resource="component://osafe/script/Event/EmailEvents.xml"/>
            <call-bsh>
                <![CDATA[
                    org.ofbiz.webapp.control.LoginWorker.doBasicLogin(createdUserLogin, request);
                    org.ofbiz.webapp.control.LoginWorker.autoLoginSet(request, response);
                ]]>
            </call-bsh>
        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-compare operator="not-equals" value="null" field="shoppingCart">
            <call-object-method obj-field="shoppingCart" method-name="setOrderPartyId">
                <field field="createdUserLogin.partyId"/>
            </call-object-method>
             <call-object-method obj-field="shoppingCart" method-name="setUserLogin">
                 <field field="createdUserLogin" type="org.ofbiz.entity.GenericValue"/>
                 <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
             </call-object-method>
             <call-object-method obj-field="shoppingCart" method-name="removeAdditionalPartyRole">
                 <field field="userLoginContext.partyId"/>
                 <string value="GUEST_CUSTOMER"/>
             </call-object-method>
        </if-compare>
        <log level="info" message="userLogin is ${userLogin}"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createOrderContactMech" short-description="Create billing and shipping for order" login-required="false">

        <!-- make Billing and shipping Postal Address information as GENERAL_LOCATION for party-->
        <call-service service-name="createPartyPostalAddress" in-map-name="addressContext">
            <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service>

        <call-service service-name="createPartyPostalAddress" in-map-name="shippingAddressContext">
            <result-to-field result-name="contactMechId" field="shippingAddressPurposeContext.contactMechId"/>
        </call-service>

        <set field="addressPurposeContext.contactMechPurposeTypeId" value="GENERAL_LOCATION" />
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>

        <set field="shippingAddressPurposeContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="shippingAddressPurposeContext"/>

        <!-- make Billing and shipping Postal Address for order-->
        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-compare operator="not-equals" value="null" field="shoppingCart">
            <call-object-method obj-field="shoppingCart" method-name="addContactMech">
                <string value="BILLING_LOCATION"/>
                <field field="addressPurposeContext.contactMechId"/>
            </call-object-method>
        </if-compare>
        <call-object-method obj-field="shoppingCart" method-name="setShippingContactMechId">
            <field field="shippingAddressPurposeContext.contactMechId"/>
        </call-object-method>
    </simple-method>

    <simple-method method-name="processpaymentFail" short-description="process payment fail" login-required="false">
        <set field="isPaymentProcessError" value="Y"/>
        <field-to-request field="isPaymentProcessError" />
        <request-to-field field="errorMessage" request-name="_ERROR_MESSAGE_"/>
        <property-to-field field="errorMessage" resource="OSafeUiLabels" property="ProcessPaymentError"/>
        <field-to-request field="errorMessage" request-name="_ERROR_MESSAGE_"/>
    </simple-method>

    <simple-method method-name="processpaymentError" short-description="process payment error" login-required="false">
        <set field="isPaymentProcessError" value="Y"/>
        <field-to-request field="isPaymentProcessError" />
        <request-to-field field="errorMessage" request-name="_ERROR_MESSAGE_"/>
        <property-to-field field="errorMessage" resource="OSafeUiLabels" property="ProcessPaymentError"/>
        <field-to-request field="errorMessage" request-name="_ERROR_MESSAGE_"/>
    </simple-method>
</simple-methods>