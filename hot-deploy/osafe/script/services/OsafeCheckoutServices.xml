<?xml version="1.0" encoding="UTF-8" ?>
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">    
    <simple-method method-name="createCustomer" short-description="create Customer" login-required="false">

        <set field="userLogin" from-field="parameters.userLogin"/>
        <if-empty field="userLogin">
            <entity-one entity-name="UserLogin" value-field="systemUserLogin">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
            <set-current-user-login value-field="systemUserLogin"/>
            <else>
                <set-current-user-login value-field="userLogin"/>
            </else>
        </if-empty>

        <set-service-fields service-name="createUpdatePerson" to-map="createUpdatePersonCtx" map="parameters"/>
        <call-service service-name="createUpdatePerson" in-map-name="createUpdatePersonCtx">
            <result-to-field result-name="partyId" field="partyId"/>
            <result-to-result result-name="partyId"/>
        </call-service>

        <if-empty field="parameters.partyId">
            <!-- Create Party Role -->
            <if-not-empty field="parameters.roleTypeId">
                <set field="createPartyRoleCtx.partyId" from-field="partyId"/>
                <set field="createPartyRoleCtx.roleTypeId" from-field="parameters.roleTypeId"/>
                <call-service service-name="createPartyRole" in-map-name="createPartyRoleCtx"/>
            </if-not-empty>

            <set field="createPartyAttrCtx.partyId" from-field="partyId"/>

            <set field="createPartyAttrCtx.attrName" value="IS_DOWNLOADED"/>
            <set field="createPartyAttrCtx.attrValue" value="N"/>
            <call-service service-name="createPartyAttribute" in-map-name="createPartyAttrCtx"/>

            <set field="createPartyAttrCtx.attrName" value="PARTY_EMAIL_PREFERENCE"/>
            <set field="createPartyAttrCtx.attrValue" from-field="parameters.partyEmailPreference"/>
            <call-service service-name="createPartyAttribute" in-map-name="createPartyAttrCtx"/>

            <set field="parameters.partyId" from-field="partyId"/>
        <else>
            <if-empty field="userLogin">
                <entity-one entity-name="PartyAttribute" value-field="partyEmailAttr" >
                    <field-map field-name="partyId" from-field="parameters.partyId"/>
                    <field-map field-name="attrName" value="PARTY_EMAIL_PREFERENCE"/>
                </entity-one>
                <if-not-empty field="partyEmailAttr">
                    <set-service-fields service-name="updatePartyAttribute" to-map="updatePartyAttrCtx" map="partyEmailAttr"/>
                    <set field="updatePartyAttrCtx.attrValue" from-field="parameters.partyEmailPreference"/>
                    <call-service service-name="updatePartyAttribute" in-map-name="updatePartyAttrCtx"/>
                </if-not-empty>
            </if-empty>
        </else>
        </if-empty>

        <if-not-empty field="parameters.currentPassword">
            <entity-one entity-name="UserLogin" value-field="existingUserLogin">
                <field-map field-name="userLoginId" from-field="parameters.userLoginId"/>
            </entity-one>
            <if-empty field="existingUserLogin">
                <!-- Create Party Person And User Login -->
                <set-service-fields service-name="createUserLogin" to-map="createUserLoginCtx" map="parameters"/>
                <set field="createUserLoginCtx.partyId" from-field="partyId"/>
                <call-service service-name="createUserLogin" in-map-name="createUserLoginCtx"/>
                <entity-one entity-name="UserLogin" value-field="newUserLogin"/>
                <set-current-user-login value-field="userLogin"/>
            <else>
                <set-service-fields service-name="updatePassword" to-map="updatePasswordCtx" map="parameters"/>
                <set field="updatePasswordCtx.userLoginId" from-field="existingUserLogin.userLoginId"/>
                <set field="updatePasswordCtx.currentPassword" from-field="existingUserLogin.currentPassword"/>
                <set field="updatePasswordCtx.newPassword" from-field="parameters.currentPassword"/>
                <set field="updatePasswordCtx.newPasswordVerify" from-field="parameters.currentPasswordVerify"/>
                <call-service service-name="updatePassword" in-map-name="updatePasswordCtx">
                    <result-to-field result-name="updatedUserLogin" field="newUserLogin"/>
                </call-service>
            </else>
            </if-empty>
            <field-to-result field="newUserLogin"/>
            <set-current-user-login value-field="newUserLogin"/>
        <else>
            <!-- the rest of the methods require a userLogin object; so if we are anonymous lets fake it -->
            <if-empty field="userLogin">
                <set field="ulLookup.userLoginId" value="anonymous"/>
                <find-by-primary-key entity-name="UserLogin" map="ulLookup" value-field="anonUserLogin"/>
                <set field="anonUserLogin.partyId" from-field="parameters.partyId"/>
                <set-current-user-login value-field="anonUserLogin"/>
                <else>
                    <field-to-result field="userLogin" result-name="existingUserLogin"/>
                </else>
            </if-empty>
        </else>
        </if-not-empty>

        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressCtx" map="parameters"/>
        <set field="createUpdatePartyPostalAddressCtx.contactMechId" from-field="parameters.billingAddressContactMechId"/>
        <set field="createUpdatePartyPostalAddressCtx.contactMechPurposeTypeId" value="BILLING_LOCATION"/>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressCtx">
            <result-to-field result-name="contactMechId" field="billingAddressContactMechId"/>
            <result-to-result result-name="contactMechId" service-result-name="billingAddressContactMechId"/>
        </call-service>

        <!-- Create Billing Home and Mobile ContactMech. -->
        <set-service-fields service-name="createUpdatePartyTelecomNumber" to-map="billingHomePhoneCtx" map="parameters.billingHomePhoneCtx"/>
        <set field="billingHomePhoneCtx.partyId" from-field="parameters.partyId"/>
        <set field="billingHomePhoneCtx.contactMechPurposeTypeId" value="PHONE_HOME"/>
        <call-service service-name="createUpdatePartyTelecomNumber" in-map-name="billingHomePhoneCtx">
            <result-to-field result-name="contactMechId" field="billingHomePhoneContactMechId"/>
            <result-to-result result-name="contactMechId" service-result-name="billingHomePhoneContactMechId"/>
        </call-service>

        <!-- Create Billing Home and Mobile ContactMech. -->
        <if-not-empty field="parameters.billingMobilePhoneCtx.contactNumber">
            <set-service-fields service-name="createUpdatePartyTelecomNumber" to-map="billingMobilePhoneCtx" map="parameters.billingMobilePhoneCtx"/>
            <set field="billingMobilePhoneCtx.partyId" from-field="parameters.partyId"/>
            <set field="billingMobilePhoneCtx.contactMechPurposeTypeId" value="PHONE_MOBILE"/>
            <call-service service-name="createUpdatePartyTelecomNumber" in-map-name="billingMobilePhoneCtx">
                <result-to-field result-name="contactMechId" field="billingMobilePhoneContactMechId"/>
                <result-to-result result-name="contactMechId" service-result-name="billingMobilePhoneContactMechId"/>
            </call-service>
        </if-not-empty>

        <!-- Create Shipping Address, Shipping Home Phone and Shipping Mobile ContactMech -->
        <if-empty field="parameters.isSameAsBilling">
            <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="shippingAddressContext" map="parameters.shippingAddressCtx"/>
            <set field="shippingAddressContext.partyId" from-field="parameters.partyId"/>
            <set field="shippingAddressContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
            <call-service service-name="createUpdatePartyPostalAddress" in-map-name="shippingAddressContext">
                <result-to-field result-name="contactMechId" field="shippingAddressContactMechId"/>
                <result-to-result result-name="contactMechId" service-result-name="shippingAddressContactMechId"/>
            </call-service>

            <!-- Create Billing Home and Mobile ContactMech. -->
            <set-service-fields service-name="createUpdatePartyTelecomNumber" to-map="shippingHomePhoneCtx" map="parameters.shippingHomePhoneCtx"/>
            <set field="shippingHomePhoneCtx.partyId" from-field="parameters.partyId"/>
            <set field="shippingHomePhoneCtx.contactMechPurposeTypeId" value="PHONE_HOME"/>
            <call-service service-name="createUpdatePartyTelecomNumber" in-map-name="shippingHomePhoneCtx">
                <result-to-field result-name="contactMechId" field="shippingHomePhoneContactMechId"/>
                <result-to-result result-name="contactMechId" service-result-name="shippingHomePhoneContactMechId"/>
            </call-service>

            <!-- Create Billing Home and Mobile ContactMech. -->
            <if-not-empty field="parameters.shippingMobilePhoneCtx">
                <if-not-empty field="parameters.shippingMobilePhoneCtx.contactNumber">
                    <set-service-fields service-name="createUpdatePartyTelecomNumber" to-map="shippingMobilePhoneCtx" map="parameters.shippingMobilePhoneCtx"/>
                    <set field="shippingMobilePhoneCtx.partyId" from-field="parameters.partyId"/>
                    <set field="shippingMobilePhoneCtx.contactMechPurposeTypeId" value="PHONE_MOBILE"/>
                    <call-service service-name="createUpdatePartyTelecomNumber" in-map-name="shippingMobilePhoneCtx">
                        <result-to-field result-name="contactMechId" field="shippingMobilePhoneContactMechId"/>
                        <result-to-result result-name="contactMechId" service-result-name="shippingMobilePhoneContactMechId"/>
                    </call-service>
                </if-not-empty>
            </if-not-empty>
        <else>
            <!-- For same as Billing case, Billing ContactMechId will use for shipping Purpose -->
            <set field="shippingAddressContactMechId" from-field="billingAddressContactMechId"/>
            <entity-and entity-name="PartyContactMechPurpose" list="partyContactMechShippingPurposeList" filter-by-date="true">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="contactMechId" from-field="shippingAddressContactMechId"/>
                <field-map field-name="contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
            </entity-and>
            <if-empty field="partyContactMechShippingPurposeList">
                <!-- Create Shipping Purpose -->
                <set field="shippingAddressPurposeCtx.partyId" from-field="parameters.partyId"/>
                <set field="shippingAddressPurposeCtx.contactMechId" from-field="shippingAddressContactMechId"/>
                <set field="shippingAddressPurposeCtx.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="shippingAddressPurposeCtx"/>
            </if-empty>
            <field-to-result field="shippingAddressContactMechId" result-name="shippingAddressContactMechId"/>
        </else>
        </if-empty>

        <!-- Create Party Email Address -->
        <set-service-fields service-name="createUpdatePartyEmailAddress" to-map="createUpdatePartyEmailCtx" map="parameters"/>
        <set field="createUpdatePartyEmailCtx.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
        <set field="createUpdatePartyEmailCtx.allowSolicitation" from-field="parameters.allowEmailSolicitation"/>
        <set field="createUpdatePartyEmailCtx.partyId" from-field="partyId"/>
        <set field="createUpdatePartyEmailCtx.roleTypeId" value="CUSTOMER"/>
        <call-service service-name="createUpdatePartyEmailAddress" in-map-name="createUpdatePartyEmailCtx">
            <result-to-field result-name="contactMechId" field="emailContactMechId"/>
            <result-to-result result-name="contactMechId" service-result-name="emailContactMechId"/>
            <result-to-result result-name="emailAddress" service-result-name="emailAddress"/>
        </call-service>

        <!-- Create Update Credit Card -->
        <if-compare field="parameters.paymentMethodTypeId" operator="equals" value="CREDIT_CARD">
            <set-service-fields service-name="createUpdateCreditCard" map="parameters" to-map="creditCardCtx"/>
            <set field="creditCardCtx.contactMechId" from-field="billingAddressContactMechId"/>
            <set field="creditCardCtx.partyId" from-field="partyId"/>
            <call-service service-name="createUpdateCreditCard" in-map-name="creditCardCtx">
                <result-to-field result-name="paymentMethodId"/>
                <result-to-result result-name="paymentMethodId"/>
            </call-service>
        </if-compare>

    </simple-method>
</simple-methods>